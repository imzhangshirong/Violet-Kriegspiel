/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Struct_pb = require('./Struct_pb.js');
goog.exportSymbol('proto.com.violet.rpc.ChatMessagePush', null, global);
goog.exportSymbol('proto.com.violet.rpc.ChessMovePush', null, global);
goog.exportSymbol('proto.com.violet.rpc.EnterBattleFieldPush', null, global);
goog.exportSymbol('proto.com.violet.rpc.GameStateChangePush', null, global);
goog.exportSymbol('proto.com.violet.rpc.PlayerStateChangePush', null, global);
goog.exportSymbol('proto.com.violet.rpc.RoomStateChangePush', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.RoomStateChangePush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.violet.rpc.RoomStateChangePush.repeatedFields_, null);
};
goog.inherits(proto.com.violet.rpc.RoomStateChangePush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.RoomStateChangePush.displayName = 'proto.com.violet.rpc.RoomStateChangePush';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.violet.rpc.RoomStateChangePush.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.RoomStateChangePush.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.RoomStateChangePush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.RoomStateChangePush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.RoomStateChangePush.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerlistList: jspb.Message.toObjectList(msg.getPlayerlistList(),
    Struct_pb.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.RoomStateChangePush}
 */
proto.com.violet.rpc.RoomStateChangePush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.RoomStateChangePush;
  return proto.com.violet.rpc.RoomStateChangePush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.RoomStateChangePush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.RoomStateChangePush}
 */
proto.com.violet.rpc.RoomStateChangePush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.PlayerInfo;
      reader.readMessage(value,Struct_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayerlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.RoomStateChangePush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.RoomStateChangePush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.RoomStateChangePush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.RoomStateChangePush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerInfo playerList = 1;
 * @return {!Array.<!proto.com.violet.rpc.PlayerInfo>}
 */
proto.com.violet.rpc.RoomStateChangePush.prototype.getPlayerlistList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.PlayerInfo, 1));
};


/** @param {!Array.<!proto.com.violet.rpc.PlayerInfo>} value */
proto.com.violet.rpc.RoomStateChangePush.prototype.setPlayerlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.violet.rpc.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.PlayerInfo}
 */
proto.com.violet.rpc.RoomStateChangePush.prototype.addPlayerlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.violet.rpc.PlayerInfo, opt_index);
};


proto.com.violet.rpc.RoomStateChangePush.prototype.clearPlayerlistList = function() {
  this.setPlayerlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.EnterBattleFieldPush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.violet.rpc.EnterBattleFieldPush.repeatedFields_, null);
};
goog.inherits(proto.com.violet.rpc.EnterBattleFieldPush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.EnterBattleFieldPush.displayName = 'proto.com.violet.rpc.EnterBattleFieldPush';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.violet.rpc.EnterBattleFieldPush.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.EnterBattleFieldPush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.EnterBattleFieldPush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterBattleFieldPush.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerlistList: jspb.Message.toObjectList(msg.getPlayerlistList(),
    Struct_pb.PlayerInfo.toObject, includeInstance),
    roundorder: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chesssettingList: jspb.Message.toObjectList(msg.getChesssettingList(),
    Struct_pb.ChessData.toObject, includeInstance),
    roomid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    readytime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    roundtime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.EnterBattleFieldPush}
 */
proto.com.violet.rpc.EnterBattleFieldPush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.EnterBattleFieldPush;
  return proto.com.violet.rpc.EnterBattleFieldPush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.EnterBattleFieldPush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.EnterBattleFieldPush}
 */
proto.com.violet.rpc.EnterBattleFieldPush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.PlayerInfo;
      reader.readMessage(value,Struct_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayerlist(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoundorder(value);
      break;
    case 3:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.addChesssetting(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReadytime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoundtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.EnterBattleFieldPush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.EnterBattleFieldPush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterBattleFieldPush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getRoundorder();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChesssettingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReadytime();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getRoundtime();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * repeated PlayerInfo playerList = 1;
 * @return {!Array.<!proto.com.violet.rpc.PlayerInfo>}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.getPlayerlistList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.PlayerInfo, 1));
};


/** @param {!Array.<!proto.com.violet.rpc.PlayerInfo>} value */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.setPlayerlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.violet.rpc.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.PlayerInfo}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.addPlayerlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.violet.rpc.PlayerInfo, opt_index);
};


proto.com.violet.rpc.EnterBattleFieldPush.prototype.clearPlayerlistList = function() {
  this.setPlayerlistList([]);
};


/**
 * optional int32 roundOrder = 2;
 * @return {number}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.getRoundorder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.setRoundorder = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated ChessData chessSetting = 3;
 * @return {!Array.<!proto.com.violet.rpc.ChessData>}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.getChesssettingList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.ChessData>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ChessData, 3));
};


/** @param {!Array.<!proto.com.violet.rpc.ChessData>} value */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.setChesssettingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.com.violet.rpc.ChessData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.addChesssetting = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.com.violet.rpc.ChessData, opt_index);
};


proto.com.violet.rpc.EnterBattleFieldPush.prototype.clearChesssettingList = function() {
  this.setChesssettingList([]);
};


/**
 * optional string roomId = 4;
 * @return {string}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 readyTime = 5;
 * @return {number}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.getReadytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.setReadytime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 roundTime = 6;
 * @return {number}
 */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.getRoundtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.com.violet.rpc.EnterBattleFieldPush.prototype.setRoundtime = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.PlayerStateChangePush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.PlayerStateChangePush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.PlayerStateChangePush.displayName = 'proto.com.violet.rpc.PlayerStateChangePush';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.PlayerStateChangePush.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.PlayerStateChangePush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.PlayerStateChangePush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.PlayerStateChangePush.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerinfo: (f = msg.getPlayerinfo()) && Struct_pb.PlayerInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.PlayerStateChangePush}
 */
proto.com.violet.rpc.PlayerStateChangePush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.PlayerStateChangePush;
  return proto.com.violet.rpc.PlayerStateChangePush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.PlayerStateChangePush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.PlayerStateChangePush}
 */
proto.com.violet.rpc.PlayerStateChangePush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.PlayerInfo;
      reader.readMessage(value,Struct_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.PlayerStateChangePush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.PlayerStateChangePush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.PlayerStateChangePush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.PlayerStateChangePush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayerInfo playerInfo = 1;
 * @return {?proto.com.violet.rpc.PlayerInfo}
 */
proto.com.violet.rpc.PlayerStateChangePush.prototype.getPlayerinfo = function() {
  return /** @type{?proto.com.violet.rpc.PlayerInfo} */ (
    jspb.Message.getWrapperField(this, Struct_pb.PlayerInfo, 1));
};


/** @param {?proto.com.violet.rpc.PlayerInfo|undefined} value */
proto.com.violet.rpc.PlayerStateChangePush.prototype.setPlayerinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.violet.rpc.PlayerStateChangePush.prototype.clearPlayerinfo = function() {
  this.setPlayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.PlayerStateChangePush.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.GameStateChangePush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.violet.rpc.GameStateChangePush.repeatedFields_, null);
};
goog.inherits(proto.com.violet.rpc.GameStateChangePush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.GameStateChangePush.displayName = 'proto.com.violet.rpc.GameStateChangePush';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.violet.rpc.GameStateChangePush.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.GameStateChangePush.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.GameStateChangePush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.GameStateChangePush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.GameStateChangePush.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chessmapList: jspb.Message.toObjectList(msg.getChessmapList(),
    Struct_pb.ChessData.toObject, includeInstance),
    counter: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.GameStateChangePush}
 */
proto.com.violet.rpc.GameStateChangePush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.GameStateChangePush;
  return proto.com.violet.rpc.GameStateChangePush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.GameStateChangePush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.GameStateChangePush}
 */
proto.com.violet.rpc.GameStateChangePush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    case 3:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.addChessmap(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.GameStateChangePush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.GameStateChangePush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.GameStateChangePush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.GameStateChangePush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChessmapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.violet.rpc.GameStateChangePush.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.GameStateChangePush.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 result = 2;
 * @return {number}
 */
proto.com.violet.rpc.GameStateChangePush.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.violet.rpc.GameStateChangePush.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated ChessData chessMap = 3;
 * @return {!Array.<!proto.com.violet.rpc.ChessData>}
 */
proto.com.violet.rpc.GameStateChangePush.prototype.getChessmapList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.ChessData>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ChessData, 3));
};


/** @param {!Array.<!proto.com.violet.rpc.ChessData>} value */
proto.com.violet.rpc.GameStateChangePush.prototype.setChessmapList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.com.violet.rpc.ChessData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.GameStateChangePush.prototype.addChessmap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.com.violet.rpc.ChessData, opt_index);
};


proto.com.violet.rpc.GameStateChangePush.prototype.clearChessmapList = function() {
  this.setChessmapList([]);
};


/**
 * optional int32 counter = 4;
 * @return {number}
 */
proto.com.violet.rpc.GameStateChangePush.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.violet.rpc.GameStateChangePush.prototype.setCounter = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.ChessMovePush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.ChessMovePush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.ChessMovePush.displayName = 'proto.com.violet.rpc.ChessMovePush';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.ChessMovePush.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.ChessMovePush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.ChessMovePush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChessMovePush.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && Struct_pb.ChessData.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && Struct_pb.ChessData.toObject(includeInstance, f),
    chessmoveresult: jspb.Message.getFieldWithDefault(msg, 3, 0),
    counter: jspb.Message.getFieldWithDefault(msg, 4, 0),
    operator: (f = msg.getOperator()) && Struct_pb.PlayerInfo.toObject(includeInstance, f),
    path: (f = msg.getPath()) && Struct_pb.ChessDataPath.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.ChessMovePush}
 */
proto.com.violet.rpc.ChessMovePush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.ChessMovePush;
  return proto.com.violet.rpc.ChessMovePush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.ChessMovePush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.ChessMovePush}
 */
proto.com.violet.rpc.ChessMovePush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChessmoveresult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounter(value);
      break;
    case 5:
      var value = new Struct_pb.PlayerInfo;
      reader.readMessage(value,Struct_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.setOperator(value);
      break;
    case 6:
      var value = new Struct_pb.ChessDataPath;
      reader.readMessage(value,Struct_pb.ChessDataPath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.ChessMovePush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.ChessMovePush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.ChessMovePush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChessMovePush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getChessmoveresult();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOperator();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      Struct_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      Struct_pb.ChessDataPath.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChessData source = 1;
 * @return {?proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.ChessMovePush.prototype.getSource = function() {
  return /** @type{?proto.com.violet.rpc.ChessData} */ (
    jspb.Message.getWrapperField(this, Struct_pb.ChessData, 1));
};


/** @param {?proto.com.violet.rpc.ChessData|undefined} value */
proto.com.violet.rpc.ChessMovePush.prototype.setSource = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.violet.rpc.ChessMovePush.prototype.clearSource = function() {
  this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.ChessMovePush.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChessData target = 2;
 * @return {?proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.ChessMovePush.prototype.getTarget = function() {
  return /** @type{?proto.com.violet.rpc.ChessData} */ (
    jspb.Message.getWrapperField(this, Struct_pb.ChessData, 2));
};


/** @param {?proto.com.violet.rpc.ChessData|undefined} value */
proto.com.violet.rpc.ChessMovePush.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.violet.rpc.ChessMovePush.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.ChessMovePush.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 chessMoveResult = 3;
 * @return {number}
 */
proto.com.violet.rpc.ChessMovePush.prototype.getChessmoveresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.violet.rpc.ChessMovePush.prototype.setChessmoveresult = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 counter = 4;
 * @return {number}
 */
proto.com.violet.rpc.ChessMovePush.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.violet.rpc.ChessMovePush.prototype.setCounter = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional PlayerInfo operator = 5;
 * @return {?proto.com.violet.rpc.PlayerInfo}
 */
proto.com.violet.rpc.ChessMovePush.prototype.getOperator = function() {
  return /** @type{?proto.com.violet.rpc.PlayerInfo} */ (
    jspb.Message.getWrapperField(this, Struct_pb.PlayerInfo, 5));
};


/** @param {?proto.com.violet.rpc.PlayerInfo|undefined} value */
proto.com.violet.rpc.ChessMovePush.prototype.setOperator = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.com.violet.rpc.ChessMovePush.prototype.clearOperator = function() {
  this.setOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.ChessMovePush.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ChessDataPath path = 6;
 * @return {?proto.com.violet.rpc.ChessDataPath}
 */
proto.com.violet.rpc.ChessMovePush.prototype.getPath = function() {
  return /** @type{?proto.com.violet.rpc.ChessDataPath} */ (
    jspb.Message.getWrapperField(this, Struct_pb.ChessDataPath, 6));
};


/** @param {?proto.com.violet.rpc.ChessDataPath|undefined} value */
proto.com.violet.rpc.ChessMovePush.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.com.violet.rpc.ChessMovePush.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.ChessMovePush.prototype.hasPath = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.ChatMessagePush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.ChatMessagePush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.ChatMessagePush.displayName = 'proto.com.violet.rpc.ChatMessagePush';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.ChatMessagePush.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.ChatMessagePush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.ChatMessagePush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChatMessagePush.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromwhere: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: (f = msg.getMsg()) && Struct_pb.MessageData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.ChatMessagePush}
 */
proto.com.violet.rpc.ChatMessagePush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.ChatMessagePush;
  return proto.com.violet.rpc.ChatMessagePush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.ChatMessagePush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.ChatMessagePush}
 */
proto.com.violet.rpc.ChatMessagePush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromwhere(value);
      break;
    case 2:
      var value = new Struct_pb.MessageData;
      reader.readMessage(value,Struct_pb.MessageData.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.ChatMessagePush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.ChatMessagePush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.ChatMessagePush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChatMessagePush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromwhere();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Struct_pb.MessageData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 fromWhere = 1;
 * @return {number}
 */
proto.com.violet.rpc.ChatMessagePush.prototype.getFromwhere = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.ChatMessagePush.prototype.setFromwhere = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MessageData msg = 2;
 * @return {?proto.com.violet.rpc.MessageData}
 */
proto.com.violet.rpc.ChatMessagePush.prototype.getMsg = function() {
  return /** @type{?proto.com.violet.rpc.MessageData} */ (
    jspb.Message.getWrapperField(this, Struct_pb.MessageData, 2));
};


/** @param {?proto.com.violet.rpc.MessageData|undefined} value */
proto.com.violet.rpc.ChatMessagePush.prototype.setMsg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.violet.rpc.ChatMessagePush.prototype.clearMsg = function() {
  this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.ChatMessagePush.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.com.violet.rpc);
