/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Struct_pb = require('./Struct_pb.js');
goog.exportSymbol('proto.com.violet.rpc.BattleMapRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.BattleMapResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.CancelFindEnemyRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.CancelFindEnemyResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.CheckGameStateRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.CheckGameStateResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.EnterBattleFieldRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.EnterBattleFieldResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.EnterRoomRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.EnterRoomResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.FindEnemyRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.FindEnemyResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.GetRoomListRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.GetRoomListResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.LeaveRoomRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.LeaveRoomResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.LoginRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.LoginResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.MoveChessRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.MoveChessResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.ReadyInRoomRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.ReadyInRoomResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.SendChatMessageRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.SendChatMessageResponse', null, global);
goog.exportSymbol('proto.com.violet.rpc.SurrenderRequest', null, global);
goog.exportSymbol('proto.com.violet.rpc.SurrenderResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.LoginRequest.displayName = 'proto.com.violet.rpc.LoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.LoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.LoginRequest}
 */
proto.com.violet.rpc.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.LoginRequest;
  return proto.com.violet.rpc.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.LoginRequest}
 */
proto.com.violet.rpc.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userName = 1;
 * @return {string}
 */
proto.com.violet.rpc.LoginRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.violet.rpc.LoginRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.com.violet.rpc.LoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.violet.rpc.LoginRequest.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.LoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.LoginResponse.displayName = 'proto.com.violet.rpc.LoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.LoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.LoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.LoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.LoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerinfo: (f = msg.getPlayerinfo()) && Struct_pb.PlayerInfo.toObject(includeInstance, f),
    servertime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.LoginResponse}
 */
proto.com.violet.rpc.LoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.LoginResponse;
  return proto.com.violet.rpc.LoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.LoginResponse}
 */
proto.com.violet.rpc.LoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.PlayerInfo;
      reader.readMessage(value,Struct_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServertime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.LoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.LoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.LoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getServertime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional PlayerInfo playerInfo = 1;
 * @return {?proto.com.violet.rpc.PlayerInfo}
 */
proto.com.violet.rpc.LoginResponse.prototype.getPlayerinfo = function() {
  return /** @type{?proto.com.violet.rpc.PlayerInfo} */ (
    jspb.Message.getWrapperField(this, Struct_pb.PlayerInfo, 1));
};


/** @param {?proto.com.violet.rpc.PlayerInfo|undefined} value */
proto.com.violet.rpc.LoginResponse.prototype.setPlayerinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.violet.rpc.LoginResponse.prototype.clearPlayerinfo = function() {
  this.setPlayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.LoginResponse.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 serverTime = 2;
 * @return {number}
 */
proto.com.violet.rpc.LoginResponse.prototype.getServertime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.violet.rpc.LoginResponse.prototype.setServertime = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.FindEnemyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.FindEnemyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.FindEnemyRequest.displayName = 'proto.com.violet.rpc.FindEnemyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.FindEnemyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.FindEnemyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.FindEnemyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.FindEnemyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.FindEnemyRequest}
 */
proto.com.violet.rpc.FindEnemyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.FindEnemyRequest;
  return proto.com.violet.rpc.FindEnemyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.FindEnemyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.FindEnemyRequest}
 */
proto.com.violet.rpc.FindEnemyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.FindEnemyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.FindEnemyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.FindEnemyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.FindEnemyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.FindEnemyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.FindEnemyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.FindEnemyResponse.displayName = 'proto.com.violet.rpc.FindEnemyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.FindEnemyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.FindEnemyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.FindEnemyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.FindEnemyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    joingamefield: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.FindEnemyResponse}
 */
proto.com.violet.rpc.FindEnemyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.FindEnemyResponse;
  return proto.com.violet.rpc.FindEnemyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.FindEnemyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.FindEnemyResponse}
 */
proto.com.violet.rpc.FindEnemyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setJoingamefield(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.FindEnemyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.FindEnemyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.FindEnemyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.FindEnemyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoingamefield();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool joinGameField = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.violet.rpc.FindEnemyResponse.prototype.getJoingamefield = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.violet.rpc.FindEnemyResponse.prototype.setJoingamefield = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.CancelFindEnemyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.CancelFindEnemyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.CancelFindEnemyRequest.displayName = 'proto.com.violet.rpc.CancelFindEnemyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.CancelFindEnemyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.CancelFindEnemyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.CancelFindEnemyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.CancelFindEnemyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.CancelFindEnemyRequest}
 */
proto.com.violet.rpc.CancelFindEnemyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.CancelFindEnemyRequest;
  return proto.com.violet.rpc.CancelFindEnemyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.CancelFindEnemyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.CancelFindEnemyRequest}
 */
proto.com.violet.rpc.CancelFindEnemyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.CancelFindEnemyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.CancelFindEnemyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.CancelFindEnemyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.CancelFindEnemyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.CancelFindEnemyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.CancelFindEnemyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.CancelFindEnemyResponse.displayName = 'proto.com.violet.rpc.CancelFindEnemyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.CancelFindEnemyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.CancelFindEnemyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.CancelFindEnemyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.CancelFindEnemyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    iscancel: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.CancelFindEnemyResponse}
 */
proto.com.violet.rpc.CancelFindEnemyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.CancelFindEnemyResponse;
  return proto.com.violet.rpc.CancelFindEnemyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.CancelFindEnemyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.CancelFindEnemyResponse}
 */
proto.com.violet.rpc.CancelFindEnemyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscancel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.CancelFindEnemyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.CancelFindEnemyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.CancelFindEnemyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.CancelFindEnemyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIscancel();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isCancel = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.violet.rpc.CancelFindEnemyResponse.prototype.getIscancel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.violet.rpc.CancelFindEnemyResponse.prototype.setIscancel = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.GetRoomListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.GetRoomListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.GetRoomListRequest.displayName = 'proto.com.violet.rpc.GetRoomListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.GetRoomListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.GetRoomListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.GetRoomListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.GetRoomListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoneid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.GetRoomListRequest}
 */
proto.com.violet.rpc.GetRoomListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.GetRoomListRequest;
  return proto.com.violet.rpc.GetRoomListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.GetRoomListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.GetRoomListRequest}
 */
proto.com.violet.rpc.GetRoomListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.GetRoomListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.GetRoomListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.GetRoomListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.GetRoomListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZoneid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 zoneId = 1;
 * @return {number}
 */
proto.com.violet.rpc.GetRoomListRequest.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.GetRoomListRequest.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.GetRoomListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.violet.rpc.GetRoomListResponse.repeatedFields_, null);
};
goog.inherits(proto.com.violet.rpc.GetRoomListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.GetRoomListResponse.displayName = 'proto.com.violet.rpc.GetRoomListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.violet.rpc.GetRoomListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.GetRoomListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.GetRoomListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.GetRoomListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.GetRoomListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomlistList: jspb.Message.toObjectList(msg.getRoomlistList(),
    Struct_pb.RoomData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.GetRoomListResponse}
 */
proto.com.violet.rpc.GetRoomListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.GetRoomListResponse;
  return proto.com.violet.rpc.GetRoomListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.GetRoomListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.GetRoomListResponse}
 */
proto.com.violet.rpc.GetRoomListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.RoomData;
      reader.readMessage(value,Struct_pb.RoomData.deserializeBinaryFromReader);
      msg.addRoomlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.GetRoomListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.GetRoomListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.GetRoomListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.GetRoomListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.RoomData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RoomData roomList = 1;
 * @return {!Array.<!proto.com.violet.rpc.RoomData>}
 */
proto.com.violet.rpc.GetRoomListResponse.prototype.getRoomlistList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.RoomData>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.RoomData, 1));
};


/** @param {!Array.<!proto.com.violet.rpc.RoomData>} value */
proto.com.violet.rpc.GetRoomListResponse.prototype.setRoomlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.violet.rpc.RoomData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.RoomData}
 */
proto.com.violet.rpc.GetRoomListResponse.prototype.addRoomlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.violet.rpc.RoomData, opt_index);
};


proto.com.violet.rpc.GetRoomListResponse.prototype.clearRoomlistList = function() {
  this.setRoomlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.EnterRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.EnterRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.EnterRoomRequest.displayName = 'proto.com.violet.rpc.EnterRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.EnterRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.EnterRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.EnterRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.EnterRoomRequest}
 */
proto.com.violet.rpc.EnterRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.EnterRoomRequest;
  return proto.com.violet.rpc.EnterRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.EnterRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.EnterRoomRequest}
 */
proto.com.violet.rpc.EnterRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.EnterRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.EnterRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.EnterRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 roomId = 1;
 * @return {number}
 */
proto.com.violet.rpc.EnterRoomRequest.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.EnterRoomRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.com.violet.rpc.EnterRoomRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.violet.rpc.EnterRoomRequest.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.EnterRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.violet.rpc.EnterRoomResponse.repeatedFields_, null);
};
goog.inherits(proto.com.violet.rpc.EnterRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.EnterRoomResponse.displayName = 'proto.com.violet.rpc.EnterRoomResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.violet.rpc.EnterRoomResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.EnterRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.EnterRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.EnterRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerlistList: jspb.Message.toObjectList(msg.getPlayerlistList(),
    Struct_pb.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.EnterRoomResponse}
 */
proto.com.violet.rpc.EnterRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.EnterRoomResponse;
  return proto.com.violet.rpc.EnterRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.EnterRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.EnterRoomResponse}
 */
proto.com.violet.rpc.EnterRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.PlayerInfo;
      reader.readMessage(value,Struct_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayerlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.EnterRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.EnterRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.EnterRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerInfo playerList = 1;
 * @return {!Array.<!proto.com.violet.rpc.PlayerInfo>}
 */
proto.com.violet.rpc.EnterRoomResponse.prototype.getPlayerlistList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.PlayerInfo, 1));
};


/** @param {!Array.<!proto.com.violet.rpc.PlayerInfo>} value */
proto.com.violet.rpc.EnterRoomResponse.prototype.setPlayerlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.violet.rpc.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.PlayerInfo}
 */
proto.com.violet.rpc.EnterRoomResponse.prototype.addPlayerlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.violet.rpc.PlayerInfo, opt_index);
};


proto.com.violet.rpc.EnterRoomResponse.prototype.clearPlayerlistList = function() {
  this.setPlayerlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.ReadyInRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.ReadyInRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.ReadyInRoomRequest.displayName = 'proto.com.violet.rpc.ReadyInRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.ReadyInRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.ReadyInRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.ReadyInRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ReadyInRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    isready: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.ReadyInRoomRequest}
 */
proto.com.violet.rpc.ReadyInRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.ReadyInRoomRequest;
  return proto.com.violet.rpc.ReadyInRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.ReadyInRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.ReadyInRoomRequest}
 */
proto.com.violet.rpc.ReadyInRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsready(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.ReadyInRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.ReadyInRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.ReadyInRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ReadyInRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsready();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isReady = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.violet.rpc.ReadyInRoomRequest.prototype.getIsready = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.violet.rpc.ReadyInRoomRequest.prototype.setIsready = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.ReadyInRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.ReadyInRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.ReadyInRoomResponse.displayName = 'proto.com.violet.rpc.ReadyInRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.ReadyInRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.ReadyInRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.ReadyInRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ReadyInRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ischangestate: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.ReadyInRoomResponse}
 */
proto.com.violet.rpc.ReadyInRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.ReadyInRoomResponse;
  return proto.com.violet.rpc.ReadyInRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.ReadyInRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.ReadyInRoomResponse}
 */
proto.com.violet.rpc.ReadyInRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIschangestate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.ReadyInRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.ReadyInRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.ReadyInRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ReadyInRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIschangestate();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isChangeState = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.violet.rpc.ReadyInRoomResponse.prototype.getIschangestate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.violet.rpc.ReadyInRoomResponse.prototype.setIschangestate = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.LeaveRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.LeaveRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.LeaveRoomRequest.displayName = 'proto.com.violet.rpc.LeaveRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.LeaveRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.LeaveRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.LeaveRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.LeaveRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.LeaveRoomRequest}
 */
proto.com.violet.rpc.LeaveRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.LeaveRoomRequest;
  return proto.com.violet.rpc.LeaveRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.LeaveRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.LeaveRoomRequest}
 */
proto.com.violet.rpc.LeaveRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.LeaveRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.LeaveRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.LeaveRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.LeaveRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 roomId = 1;
 * @return {number}
 */
proto.com.violet.rpc.LeaveRoomRequest.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.LeaveRoomRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.LeaveRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.LeaveRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.LeaveRoomResponse.displayName = 'proto.com.violet.rpc.LeaveRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.LeaveRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.LeaveRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.LeaveRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.LeaveRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isleave: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.LeaveRoomResponse}
 */
proto.com.violet.rpc.LeaveRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.LeaveRoomResponse;
  return proto.com.violet.rpc.LeaveRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.LeaveRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.LeaveRoomResponse}
 */
proto.com.violet.rpc.LeaveRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsleave(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.LeaveRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.LeaveRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.LeaveRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.LeaveRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsleave();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isLeave = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.violet.rpc.LeaveRoomResponse.prototype.getIsleave = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.violet.rpc.LeaveRoomResponse.prototype.setIsleave = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.MoveChessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.MoveChessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.MoveChessRequest.displayName = 'proto.com.violet.rpc.MoveChessRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.MoveChessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.MoveChessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.MoveChessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.MoveChessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && Struct_pb.ChessData.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && Struct_pb.ChessData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.MoveChessRequest}
 */
proto.com.violet.rpc.MoveChessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.MoveChessRequest;
  return proto.com.violet.rpc.MoveChessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.MoveChessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.MoveChessRequest}
 */
proto.com.violet.rpc.MoveChessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.MoveChessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.MoveChessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.MoveChessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.MoveChessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChessData source = 1;
 * @return {?proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.MoveChessRequest.prototype.getSource = function() {
  return /** @type{?proto.com.violet.rpc.ChessData} */ (
    jspb.Message.getWrapperField(this, Struct_pb.ChessData, 1));
};


/** @param {?proto.com.violet.rpc.ChessData|undefined} value */
proto.com.violet.rpc.MoveChessRequest.prototype.setSource = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.violet.rpc.MoveChessRequest.prototype.clearSource = function() {
  this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.MoveChessRequest.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChessData target = 2;
 * @return {?proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.MoveChessRequest.prototype.getTarget = function() {
  return /** @type{?proto.com.violet.rpc.ChessData} */ (
    jspb.Message.getWrapperField(this, Struct_pb.ChessData, 2));
};


/** @param {?proto.com.violet.rpc.ChessData|undefined} value */
proto.com.violet.rpc.MoveChessRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.violet.rpc.MoveChessRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.MoveChessRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.MoveChessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.MoveChessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.MoveChessResponse.displayName = 'proto.com.violet.rpc.MoveChessResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.MoveChessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.MoveChessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.MoveChessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.MoveChessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && Struct_pb.ChessData.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && Struct_pb.ChessData.toObject(includeInstance, f),
    chessmoveresult: jspb.Message.getFieldWithDefault(msg, 3, 0),
    counter: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.MoveChessResponse}
 */
proto.com.violet.rpc.MoveChessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.MoveChessResponse;
  return proto.com.violet.rpc.MoveChessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.MoveChessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.MoveChessResponse}
 */
proto.com.violet.rpc.MoveChessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChessmoveresult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.MoveChessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.MoveChessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.MoveChessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.MoveChessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getChessmoveresult();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional ChessData source = 1;
 * @return {?proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.MoveChessResponse.prototype.getSource = function() {
  return /** @type{?proto.com.violet.rpc.ChessData} */ (
    jspb.Message.getWrapperField(this, Struct_pb.ChessData, 1));
};


/** @param {?proto.com.violet.rpc.ChessData|undefined} value */
proto.com.violet.rpc.MoveChessResponse.prototype.setSource = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.violet.rpc.MoveChessResponse.prototype.clearSource = function() {
  this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.MoveChessResponse.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChessData target = 2;
 * @return {?proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.MoveChessResponse.prototype.getTarget = function() {
  return /** @type{?proto.com.violet.rpc.ChessData} */ (
    jspb.Message.getWrapperField(this, Struct_pb.ChessData, 2));
};


/** @param {?proto.com.violet.rpc.ChessData|undefined} value */
proto.com.violet.rpc.MoveChessResponse.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.violet.rpc.MoveChessResponse.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.MoveChessResponse.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 chessMoveResult = 3;
 * @return {number}
 */
proto.com.violet.rpc.MoveChessResponse.prototype.getChessmoveresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.violet.rpc.MoveChessResponse.prototype.setChessmoveresult = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 counter = 4;
 * @return {number}
 */
proto.com.violet.rpc.MoveChessResponse.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.violet.rpc.MoveChessResponse.prototype.setCounter = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.BattleMapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.BattleMapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.BattleMapRequest.displayName = 'proto.com.violet.rpc.BattleMapRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.BattleMapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.BattleMapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.BattleMapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.BattleMapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.BattleMapRequest}
 */
proto.com.violet.rpc.BattleMapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.BattleMapRequest;
  return proto.com.violet.rpc.BattleMapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.BattleMapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.BattleMapRequest}
 */
proto.com.violet.rpc.BattleMapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.BattleMapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.BattleMapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.BattleMapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.BattleMapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.BattleMapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.violet.rpc.BattleMapResponse.repeatedFields_, null);
};
goog.inherits(proto.com.violet.rpc.BattleMapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.BattleMapResponse.displayName = 'proto.com.violet.rpc.BattleMapResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.violet.rpc.BattleMapResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.BattleMapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.BattleMapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.BattleMapResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.BattleMapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chessmapList: jspb.Message.toObjectList(msg.getChessmapList(),
    Struct_pb.ChessData.toObject, includeInstance),
    counter: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.BattleMapResponse}
 */
proto.com.violet.rpc.BattleMapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.BattleMapResponse;
  return proto.com.violet.rpc.BattleMapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.BattleMapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.BattleMapResponse}
 */
proto.com.violet.rpc.BattleMapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.addChessmap(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.BattleMapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.BattleMapResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.BattleMapResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.BattleMapResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChessmapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated ChessData chessMap = 1;
 * @return {!Array.<!proto.com.violet.rpc.ChessData>}
 */
proto.com.violet.rpc.BattleMapResponse.prototype.getChessmapList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.ChessData>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ChessData, 1));
};


/** @param {!Array.<!proto.com.violet.rpc.ChessData>} value */
proto.com.violet.rpc.BattleMapResponse.prototype.setChessmapList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.violet.rpc.ChessData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.BattleMapResponse.prototype.addChessmap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.violet.rpc.ChessData, opt_index);
};


proto.com.violet.rpc.BattleMapResponse.prototype.clearChessmapList = function() {
  this.setChessmapList([]);
};


/**
 * optional int32 counter = 2;
 * @return {number}
 */
proto.com.violet.rpc.BattleMapResponse.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.violet.rpc.BattleMapResponse.prototype.setCounter = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.CheckGameStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.CheckGameStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.CheckGameStateRequest.displayName = 'proto.com.violet.rpc.CheckGameStateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.CheckGameStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.CheckGameStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.CheckGameStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.CheckGameStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.CheckGameStateRequest}
 */
proto.com.violet.rpc.CheckGameStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.CheckGameStateRequest;
  return proto.com.violet.rpc.CheckGameStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.CheckGameStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.CheckGameStateRequest}
 */
proto.com.violet.rpc.CheckGameStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.CheckGameStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.CheckGameStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.CheckGameStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.CheckGameStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.CheckGameStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.CheckGameStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.CheckGameStateResponse.displayName = 'proto.com.violet.rpc.CheckGameStateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.CheckGameStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.CheckGameStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.CheckGameStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.CheckGameStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomtoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.CheckGameStateResponse}
 */
proto.com.violet.rpc.CheckGameStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.CheckGameStateResponse;
  return proto.com.violet.rpc.CheckGameStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.CheckGameStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.CheckGameStateResponse}
 */
proto.com.violet.rpc.CheckGameStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.CheckGameStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.CheckGameStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.CheckGameStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.CheckGameStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomtoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string roomToken = 1;
 * @return {string}
 */
proto.com.violet.rpc.CheckGameStateResponse.prototype.getRoomtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.violet.rpc.CheckGameStateResponse.prototype.setRoomtoken = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.EnterBattleFieldRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.EnterBattleFieldRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.EnterBattleFieldRequest.displayName = 'proto.com.violet.rpc.EnterBattleFieldRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.EnterBattleFieldRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.EnterBattleFieldRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.EnterBattleFieldRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterBattleFieldRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomtoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.EnterBattleFieldRequest}
 */
proto.com.violet.rpc.EnterBattleFieldRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.EnterBattleFieldRequest;
  return proto.com.violet.rpc.EnterBattleFieldRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.EnterBattleFieldRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.EnterBattleFieldRequest}
 */
proto.com.violet.rpc.EnterBattleFieldRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.EnterBattleFieldRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.EnterBattleFieldRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.EnterBattleFieldRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterBattleFieldRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomtoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string roomToken = 1;
 * @return {string}
 */
proto.com.violet.rpc.EnterBattleFieldRequest.prototype.getRoomtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.violet.rpc.EnterBattleFieldRequest.prototype.setRoomtoken = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.EnterBattleFieldResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.violet.rpc.EnterBattleFieldResponse.repeatedFields_, null);
};
goog.inherits(proto.com.violet.rpc.EnterBattleFieldResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.EnterBattleFieldResponse.displayName = 'proto.com.violet.rpc.EnterBattleFieldResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.violet.rpc.EnterBattleFieldResponse.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.EnterBattleFieldResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.EnterBattleFieldResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterBattleFieldResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomdata: (f = msg.getRoomdata()) && Struct_pb.RoomData.toObject(includeInstance, f),
    playerlistList: jspb.Message.toObjectList(msg.getPlayerlistList(),
    Struct_pb.PlayerInfo.toObject, includeInstance),
    chessmapList: jspb.Message.toObjectList(msg.getChessmapList(),
    Struct_pb.ChessData.toObject, includeInstance),
    counter: jspb.Message.getFieldWithDefault(msg, 4, 0),
    roundorder: jspb.Message.getFieldWithDefault(msg, 5, 0),
    remaintime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.EnterBattleFieldResponse}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.EnterBattleFieldResponse;
  return proto.com.violet.rpc.EnterBattleFieldResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.EnterBattleFieldResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.EnterBattleFieldResponse}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.RoomData;
      reader.readMessage(value,Struct_pb.RoomData.deserializeBinaryFromReader);
      msg.setRoomdata(value);
      break;
    case 2:
      var value = new Struct_pb.PlayerInfo;
      reader.readMessage(value,Struct_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayerlist(value);
      break;
    case 3:
      var value = new Struct_pb.ChessData;
      reader.readMessage(value,Struct_pb.ChessData.deserializeBinaryFromReader);
      msg.addChessmap(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoundorder(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemaintime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.EnterBattleFieldResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.EnterBattleFieldResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.EnterBattleFieldResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomdata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.RoomData.serializeBinaryToWriter
    );
  }
  f = message.getPlayerlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      Struct_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getChessmapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      Struct_pb.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRoundorder();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getRemaintime();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional RoomData roomData = 1;
 * @return {?proto.com.violet.rpc.RoomData}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.getRoomdata = function() {
  return /** @type{?proto.com.violet.rpc.RoomData} */ (
    jspb.Message.getWrapperField(this, Struct_pb.RoomData, 1));
};


/** @param {?proto.com.violet.rpc.RoomData|undefined} value */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.setRoomdata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.violet.rpc.EnterBattleFieldResponse.prototype.clearRoomdata = function() {
  this.setRoomdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.hasRoomdata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PlayerInfo playerList = 2;
 * @return {!Array.<!proto.com.violet.rpc.PlayerInfo>}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.getPlayerlistList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.PlayerInfo, 2));
};


/** @param {!Array.<!proto.com.violet.rpc.PlayerInfo>} value */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.setPlayerlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.com.violet.rpc.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.PlayerInfo}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.addPlayerlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.com.violet.rpc.PlayerInfo, opt_index);
};


proto.com.violet.rpc.EnterBattleFieldResponse.prototype.clearPlayerlistList = function() {
  this.setPlayerlistList([]);
};


/**
 * repeated ChessData chessMap = 3;
 * @return {!Array.<!proto.com.violet.rpc.ChessData>}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.getChessmapList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.ChessData>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ChessData, 3));
};


/** @param {!Array.<!proto.com.violet.rpc.ChessData>} value */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.setChessmapList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.com.violet.rpc.ChessData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.addChessmap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.com.violet.rpc.ChessData, opt_index);
};


proto.com.violet.rpc.EnterBattleFieldResponse.prototype.clearChessmapList = function() {
  this.setChessmapList([]);
};


/**
 * optional int32 counter = 4;
 * @return {number}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.setCounter = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 roundOrder = 5;
 * @return {number}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.getRoundorder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.setRoundorder = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 remainTime = 6;
 * @return {number}
 */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.getRemaintime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.com.violet.rpc.EnterBattleFieldResponse.prototype.setRemaintime = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.SurrenderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.SurrenderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.SurrenderRequest.displayName = 'proto.com.violet.rpc.SurrenderRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.SurrenderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.SurrenderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.SurrenderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.SurrenderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.SurrenderRequest}
 */
proto.com.violet.rpc.SurrenderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.SurrenderRequest;
  return proto.com.violet.rpc.SurrenderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.SurrenderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.SurrenderRequest}
 */
proto.com.violet.rpc.SurrenderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.SurrenderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.SurrenderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.SurrenderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.SurrenderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.SurrenderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.SurrenderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.SurrenderResponse.displayName = 'proto.com.violet.rpc.SurrenderResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.SurrenderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.SurrenderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.SurrenderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.SurrenderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    issurrender: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.SurrenderResponse}
 */
proto.com.violet.rpc.SurrenderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.SurrenderResponse;
  return proto.com.violet.rpc.SurrenderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.SurrenderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.SurrenderResponse}
 */
proto.com.violet.rpc.SurrenderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssurrender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.SurrenderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.SurrenderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.SurrenderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.SurrenderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssurrender();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isSurrender = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.violet.rpc.SurrenderResponse.prototype.getIssurrender = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.violet.rpc.SurrenderResponse.prototype.setIssurrender = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.SendChatMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.SendChatMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.SendChatMessageRequest.displayName = 'proto.com.violet.rpc.SendChatMessageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.SendChatMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.SendChatMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.SendChatMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.SendChatMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    towhere: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: (f = msg.getMsg()) && Struct_pb.MessageData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.SendChatMessageRequest}
 */
proto.com.violet.rpc.SendChatMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.SendChatMessageRequest;
  return proto.com.violet.rpc.SendChatMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.SendChatMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.SendChatMessageRequest}
 */
proto.com.violet.rpc.SendChatMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTowhere(value);
      break;
    case 2:
      var value = new Struct_pb.MessageData;
      reader.readMessage(value,Struct_pb.MessageData.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.SendChatMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.SendChatMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.SendChatMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.SendChatMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTowhere();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Struct_pb.MessageData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 toWhere = 1;
 * @return {number}
 */
proto.com.violet.rpc.SendChatMessageRequest.prototype.getTowhere = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.SendChatMessageRequest.prototype.setTowhere = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MessageData msg = 2;
 * @return {?proto.com.violet.rpc.MessageData}
 */
proto.com.violet.rpc.SendChatMessageRequest.prototype.getMsg = function() {
  return /** @type{?proto.com.violet.rpc.MessageData} */ (
    jspb.Message.getWrapperField(this, Struct_pb.MessageData, 2));
};


/** @param {?proto.com.violet.rpc.MessageData|undefined} value */
proto.com.violet.rpc.SendChatMessageRequest.prototype.setMsg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.violet.rpc.SendChatMessageRequest.prototype.clearMsg = function() {
  this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.SendChatMessageRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.SendChatMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.SendChatMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.SendChatMessageResponse.displayName = 'proto.com.violet.rpc.SendChatMessageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.SendChatMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.SendChatMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.SendChatMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.SendChatMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.SendChatMessageResponse}
 */
proto.com.violet.rpc.SendChatMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.SendChatMessageResponse;
  return proto.com.violet.rpc.SendChatMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.SendChatMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.SendChatMessageResponse}
 */
proto.com.violet.rpc.SendChatMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.SendChatMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.SendChatMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.SendChatMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.SendChatMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.com.violet.rpc);
