/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.violet.rpc.ChessData', null, global);
goog.exportSymbol('proto.com.violet.rpc.ChessDataPath', null, global);
goog.exportSymbol('proto.com.violet.rpc.ChessPoint', null, global);
goog.exportSymbol('proto.com.violet.rpc.HistoryStep', null, global);
goog.exportSymbol('proto.com.violet.rpc.MessageData', null, global);
goog.exportSymbol('proto.com.violet.rpc.PlayerInfo', null, global);
goog.exportSymbol('proto.com.violet.rpc.RoomData', null, global);
goog.exportSymbol('proto.com.violet.rpc._Request', null, global);
goog.exportSymbol('proto.com.violet.rpc._Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc._Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc._Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc._Request.displayName = 'proto.com.violet.rpc._Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc._Request.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc._Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc._Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc._Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rpc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unique: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc._Request}
 */
proto.com.violet.rpc._Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc._Request;
  return proto.com.violet.rpc._Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc._Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc._Request}
 */
proto.com.violet.rpc._Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRpc(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnique(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc._Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc._Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc._Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc._Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRpc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnique();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.com.violet.rpc._Request.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.violet.rpc._Request.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string rpc = 2;
 * @return {string}
 */
proto.com.violet.rpc._Request.prototype.getRpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.violet.rpc._Request.prototype.setRpc = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 unique = 3;
 * @return {number}
 */
proto.com.violet.rpc._Request.prototype.getUnique = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.violet.rpc._Request.prototype.setUnique = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.com.violet.rpc._Request.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.com.violet.rpc._Request.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.com.violet.rpc._Request.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.com.violet.rpc._Request.prototype.setData = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc._Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc._Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc._Response.displayName = 'proto.com.violet.rpc._Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc._Response.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc._Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc._Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc._Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rpc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    unique: jspb.Message.getFieldWithDefault(msg, 4, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc._Response}
 */
proto.com.violet.rpc._Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc._Response;
  return proto.com.violet.rpc._Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc._Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc._Response}
 */
proto.com.violet.rpc._Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRpc(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnique(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc._Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc._Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc._Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc._Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRpc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUnique();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.com.violet.rpc._Response.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.violet.rpc._Response.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.com.violet.rpc._Response.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.violet.rpc._Response.prototype.setCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string rpc = 3;
 * @return {string}
 */
proto.com.violet.rpc._Response.prototype.getRpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.violet.rpc._Response.prototype.setRpc = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 unique = 4;
 * @return {number}
 */
proto.com.violet.rpc._Response.prototype.getUnique = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.violet.rpc._Response.prototype.setUnique = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.com.violet.rpc._Response.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.com.violet.rpc._Response.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.com.violet.rpc._Response.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.com.violet.rpc._Response.prototype.setData = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.PlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.PlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.PlayerInfo.displayName = 'proto.com.violet.rpc.PlayerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.PlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.PlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.PlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.PlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0),
    zoneid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gameremaintime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    roundorder: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.PlayerInfo}
 */
proto.com.violet.rpc.PlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.PlayerInfo;
  return proto.com.violet.rpc.PlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.PlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.PlayerInfo}
 */
proto.com.violet.rpc.PlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameremaintime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoundorder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.PlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.PlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.PlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.PlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getZoneid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGameremaintime();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getRoundorder();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int32 userId = 1;
 * @return {number}
 */
proto.com.violet.rpc.PlayerInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.PlayerInfo.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string userName = 2;
 * @return {string}
 */
proto.com.violet.rpc.PlayerInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.violet.rpc.PlayerInfo.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 level = 3;
 * @return {number}
 */
proto.com.violet.rpc.PlayerInfo.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.violet.rpc.PlayerInfo.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 zoneId = 4;
 * @return {number}
 */
proto.com.violet.rpc.PlayerInfo.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.violet.rpc.PlayerInfo.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 state = 5;
 * @return {number}
 */
proto.com.violet.rpc.PlayerInfo.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.violet.rpc.PlayerInfo.prototype.setState = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 gameRemainTime = 6;
 * @return {number}
 */
proto.com.violet.rpc.PlayerInfo.prototype.getGameremaintime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.com.violet.rpc.PlayerInfo.prototype.setGameremaintime = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 roundOrder = 7;
 * @return {number}
 */
proto.com.violet.rpc.PlayerInfo.prototype.getRoundorder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.com.violet.rpc.PlayerInfo.prototype.setRoundorder = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.ChessData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.ChessData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.ChessData.displayName = 'proto.com.violet.rpc.ChessData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.ChessData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.ChessData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.ChessData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChessData.toObject = function(includeInstance, msg) {
  var f, obj = {
    chessremoteid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chesstype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    point: (f = msg.getPoint()) && proto.com.violet.rpc.ChessPoint.toObject(includeInstance, f),
    group: jspb.Message.getFieldWithDefault(msg, 4, 0),
    belong: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.ChessData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.ChessData;
  return proto.com.violet.rpc.ChessData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.ChessData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.ChessData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChessremoteid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChesstype(value);
      break;
    case 3:
      var value = new proto.com.violet.rpc.ChessPoint;
      reader.readMessage(value,proto.com.violet.rpc.ChessPoint.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroup(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBelong(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.ChessData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.ChessData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.ChessData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChessData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChessremoteid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChesstype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.violet.rpc.ChessPoint.serializeBinaryToWriter
    );
  }
  f = message.getGroup();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBelong();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 chessRemoteId = 1;
 * @return {number}
 */
proto.com.violet.rpc.ChessData.prototype.getChessremoteid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.ChessData.prototype.setChessremoteid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 ChessType = 2;
 * @return {number}
 */
proto.com.violet.rpc.ChessData.prototype.getChesstype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.violet.rpc.ChessData.prototype.setChesstype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ChessPoint point = 3;
 * @return {?proto.com.violet.rpc.ChessPoint}
 */
proto.com.violet.rpc.ChessData.prototype.getPoint = function() {
  return /** @type{?proto.com.violet.rpc.ChessPoint} */ (
    jspb.Message.getWrapperField(this, proto.com.violet.rpc.ChessPoint, 3));
};


/** @param {?proto.com.violet.rpc.ChessPoint|undefined} value */
proto.com.violet.rpc.ChessData.prototype.setPoint = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.com.violet.rpc.ChessData.prototype.clearPoint = function() {
  this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.ChessData.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 group = 4;
 * @return {number}
 */
proto.com.violet.rpc.ChessData.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.violet.rpc.ChessData.prototype.setGroup = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string belong = 5;
 * @return {string}
 */
proto.com.violet.rpc.ChessData.prototype.getBelong = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.violet.rpc.ChessData.prototype.setBelong = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.ChessPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.ChessPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.ChessPoint.displayName = 'proto.com.violet.rpc.ChessPoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.ChessPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.ChessPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.ChessPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChessPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.ChessPoint}
 */
proto.com.violet.rpc.ChessPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.ChessPoint;
  return proto.com.violet.rpc.ChessPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.ChessPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.ChessPoint}
 */
proto.com.violet.rpc.ChessPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.ChessPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.ChessPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.ChessPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChessPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.com.violet.rpc.ChessPoint.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.ChessPoint.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.com.violet.rpc.ChessPoint.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.violet.rpc.ChessPoint.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.RoomData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.RoomData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.RoomData.displayName = 'proto.com.violet.rpc.RoomData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.RoomData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.RoomData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.RoomData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.RoomData.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.RoomData}
 */
proto.com.violet.rpc.RoomData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.RoomData;
  return proto.com.violet.rpc.RoomData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.RoomData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.RoomData}
 */
proto.com.violet.rpc.RoomData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.RoomData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.RoomData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.RoomData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.RoomData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 roomId = 1;
 * @return {number}
 */
proto.com.violet.rpc.RoomData.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.RoomData.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string roomName = 2;
 * @return {string}
 */
proto.com.violet.rpc.RoomData.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.violet.rpc.RoomData.prototype.setRoomname = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.MessageData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.MessageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.MessageData.displayName = 'proto.com.violet.rpc.MessageData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.MessageData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.MessageData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.MessageData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.MessageData.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    zoneid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    content: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.MessageData}
 */
proto.com.violet.rpc.MessageData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.MessageData;
  return proto.com.violet.rpc.MessageData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.MessageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.MessageData}
 */
proto.com.violet.rpc.MessageData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.MessageData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.MessageData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.MessageData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.MessageData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getZoneid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 userId = 1;
 * @return {number}
 */
proto.com.violet.rpc.MessageData.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.MessageData.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 zoneId = 2;
 * @return {number}
 */
proto.com.violet.rpc.MessageData.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.violet.rpc.MessageData.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string userName = 3;
 * @return {string}
 */
proto.com.violet.rpc.MessageData.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.violet.rpc.MessageData.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 level = 4;
 * @return {number}
 */
proto.com.violet.rpc.MessageData.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.violet.rpc.MessageData.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.com.violet.rpc.MessageData.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.violet.rpc.MessageData.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string content = 6;
 * @return {string}
 */
proto.com.violet.rpc.MessageData.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.violet.rpc.MessageData.prototype.setContent = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.HistoryStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.violet.rpc.HistoryStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.HistoryStep.displayName = 'proto.com.violet.rpc.HistoryStep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.HistoryStep.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.HistoryStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.HistoryStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.HistoryStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    counter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    source: (f = msg.getSource()) && proto.com.violet.rpc.ChessData.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.com.violet.rpc.ChessData.toObject(includeInstance, f),
    path: (f = msg.getPath()) && proto.com.violet.rpc.ChessDataPath.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.HistoryStep}
 */
proto.com.violet.rpc.HistoryStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.HistoryStep;
  return proto.com.violet.rpc.HistoryStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.HistoryStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.HistoryStep}
 */
proto.com.violet.rpc.HistoryStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounter(value);
      break;
    case 2:
      var value = new proto.com.violet.rpc.ChessData;
      reader.readMessage(value,proto.com.violet.rpc.ChessData.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 3:
      var value = new proto.com.violet.rpc.ChessData;
      reader.readMessage(value,proto.com.violet.rpc.ChessData.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = new proto.com.violet.rpc.ChessDataPath;
      reader.readMessage(value,proto.com.violet.rpc.ChessDataPath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.HistoryStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.HistoryStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.HistoryStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.HistoryStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCounter();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.violet.rpc.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.violet.rpc.ChessData.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.violet.rpc.ChessDataPath.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 counter = 1;
 * @return {number}
 */
proto.com.violet.rpc.HistoryStep.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.violet.rpc.HistoryStep.prototype.setCounter = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ChessData source = 2;
 * @return {?proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.HistoryStep.prototype.getSource = function() {
  return /** @type{?proto.com.violet.rpc.ChessData} */ (
    jspb.Message.getWrapperField(this, proto.com.violet.rpc.ChessData, 2));
};


/** @param {?proto.com.violet.rpc.ChessData|undefined} value */
proto.com.violet.rpc.HistoryStep.prototype.setSource = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.violet.rpc.HistoryStep.prototype.clearSource = function() {
  this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.HistoryStep.prototype.hasSource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChessData target = 3;
 * @return {?proto.com.violet.rpc.ChessData}
 */
proto.com.violet.rpc.HistoryStep.prototype.getTarget = function() {
  return /** @type{?proto.com.violet.rpc.ChessData} */ (
    jspb.Message.getWrapperField(this, proto.com.violet.rpc.ChessData, 3));
};


/** @param {?proto.com.violet.rpc.ChessData|undefined} value */
proto.com.violet.rpc.HistoryStep.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.com.violet.rpc.HistoryStep.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.HistoryStep.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChessDataPath path = 4;
 * @return {?proto.com.violet.rpc.ChessDataPath}
 */
proto.com.violet.rpc.HistoryStep.prototype.getPath = function() {
  return /** @type{?proto.com.violet.rpc.ChessDataPath} */ (
    jspb.Message.getWrapperField(this, proto.com.violet.rpc.ChessDataPath, 4));
};


/** @param {?proto.com.violet.rpc.ChessDataPath|undefined} value */
proto.com.violet.rpc.HistoryStep.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.com.violet.rpc.HistoryStep.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.violet.rpc.HistoryStep.prototype.hasPath = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 result = 5;
 * @return {number}
 */
proto.com.violet.rpc.HistoryStep.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.violet.rpc.HistoryStep.prototype.setResult = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.violet.rpc.ChessDataPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.violet.rpc.ChessDataPath.repeatedFields_, null);
};
goog.inherits(proto.com.violet.rpc.ChessDataPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.violet.rpc.ChessDataPath.displayName = 'proto.com.violet.rpc.ChessDataPath';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.violet.rpc.ChessDataPath.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.violet.rpc.ChessDataPath.prototype.toObject = function(opt_includeInstance) {
  return proto.com.violet.rpc.ChessDataPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.violet.rpc.ChessDataPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChessDataPath.toObject = function(includeInstance, msg) {
  var f, obj = {
    chesspointsList: jspb.Message.toObjectList(msg.getChesspointsList(),
    proto.com.violet.rpc.ChessPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.violet.rpc.ChessDataPath}
 */
proto.com.violet.rpc.ChessDataPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.violet.rpc.ChessDataPath;
  return proto.com.violet.rpc.ChessDataPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.violet.rpc.ChessDataPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.violet.rpc.ChessDataPath}
 */
proto.com.violet.rpc.ChessDataPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.violet.rpc.ChessPoint;
      reader.readMessage(value,proto.com.violet.rpc.ChessPoint.deserializeBinaryFromReader);
      msg.addChesspoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.violet.rpc.ChessDataPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.violet.rpc.ChessDataPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.violet.rpc.ChessDataPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.violet.rpc.ChessDataPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChesspointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.violet.rpc.ChessPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChessPoint chessPoints = 1;
 * @return {!Array.<!proto.com.violet.rpc.ChessPoint>}
 */
proto.com.violet.rpc.ChessDataPath.prototype.getChesspointsList = function() {
  return /** @type{!Array.<!proto.com.violet.rpc.ChessPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.violet.rpc.ChessPoint, 1));
};


/** @param {!Array.<!proto.com.violet.rpc.ChessPoint>} value */
proto.com.violet.rpc.ChessDataPath.prototype.setChesspointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.violet.rpc.ChessPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.violet.rpc.ChessPoint}
 */
proto.com.violet.rpc.ChessDataPath.prototype.addChesspoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.violet.rpc.ChessPoint, opt_index);
};


proto.com.violet.rpc.ChessDataPath.prototype.clearChesspointsList = function() {
  this.setChesspointsList([]);
};


goog.object.extend(exports, proto.com.violet.rpc);
