// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Violet.Rpc {

  /// <summary>Holder for reflection information generated from Struct.proto</summary>
  public static partial class StructReflection {

    #region Descriptor
    /// <summary>File descriptor for Struct.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StructReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTdHJ1Y3QucHJvdG8SDmNvbS52aW9sZXQucnBjIkQKCF9SZXF1ZXN0Eg0K",
            "BXRva2VuGAEgASgJEgsKA3JwYxgCIAEoCRIOCgZ1bmlxdWUYAyABKAUSDAoE",
            "ZGF0YRgEIAEoDCJTCglfUmVzcG9uc2USDQoFdG9rZW4YASABKAkSDAoEY29k",
            "ZRgCIAEoBRILCgNycGMYAyABKAkSDgoGdW5pcXVlGAQgASgFEgwKBGRhdGEY",
            "BSABKAwiiAEKClBsYXllckluZm8SDgoGdXNlcklkGAEgASgFEhAKCHVzZXJO",
            "YW1lGAIgASgJEg0KBWxldmVsGAMgASgFEg4KBnpvbmVJZBgEIAEoBRINCgVz",
            "dGF0ZRgFIAEoBRIWCg5nYW1lUmVtYWluVGltZRgGIAEoBRISCgpyb3VuZE9y",
            "ZGVyGAcgASgFIn8KCUNoZXNzRGF0YRIVCg1jaGVzc1JlbW90ZUlkGAEgASgF",
            "EhEKCUNoZXNzVHlwZRgCIAEoBRIpCgVwb2ludBgDIAEoCzIaLmNvbS52aW9s",
            "ZXQucnBjLkNoZXNzUG9pbnQSDQoFZ3JvdXAYBCABKAUSDgoGYmVsb25nGAUg",
            "ASgJIiIKCkNoZXNzUG9pbnQSCQoBeBgBIAEoBRIJCgF5GAIgASgFIiwKCFJv",
            "b21EYXRhEg4KBnJvb21JZBgBIAEoBRIQCghyb29tTmFtZRgCIAEoCSJyCgtN",
            "ZXNzYWdlRGF0YRIOCgZ1c2VySWQYASABKAUSDgoGem9uZUlkGAIgASgFEhAK",
            "CHVzZXJOYW1lGAMgASgJEg0KBWxldmVsGAQgASgFEhEKCXRpbWVzdGFtcBgF",
            "IAEoAxIPCgdjb250ZW50GAYgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc._Request), global::Com.Violet.Rpc._Request.Parser, new[]{ "Token", "Rpc", "Unique", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc._Response), global::Com.Violet.Rpc._Response.Parser, new[]{ "Token", "Code", "Rpc", "Unique", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.PlayerInfo), global::Com.Violet.Rpc.PlayerInfo.Parser, new[]{ "UserId", "UserName", "Level", "ZoneId", "State", "GameRemainTime", "RoundOrder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.ChessData), global::Com.Violet.Rpc.ChessData.Parser, new[]{ "ChessRemoteId", "ChessType", "Point", "Group", "Belong" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.ChessPoint), global::Com.Violet.Rpc.ChessPoint.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.RoomData), global::Com.Violet.Rpc.RoomData.Parser, new[]{ "RoomId", "RoomName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.MessageData), global::Com.Violet.Rpc.MessageData.Parser, new[]{ "UserId", "ZoneId", "UserName", "Level", "Timestamp", "Content" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class _Request : pb::IMessage<_Request> {
    private static readonly pb::MessageParser<_Request> _parser = new pb::MessageParser<_Request>(() => new _Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.StructReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _Request(_Request other) : this() {
      token_ = other.token_;
      rpc_ = other.rpc_;
      unique_ = other.unique_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _Request Clone() {
      return new _Request(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rpc" field.</summary>
    public const int RpcFieldNumber = 2;
    private string rpc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rpc {
      get { return rpc_; }
      set {
        rpc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique" field.</summary>
    public const int UniqueFieldNumber = 3;
    private int unique_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unique {
      get { return unique_; }
      set {
        unique_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Rpc != other.Rpc) return false;
      if (Unique != other.Unique) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Rpc.Length != 0) hash ^= Rpc.GetHashCode();
      if (Unique != 0) hash ^= Unique.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Rpc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Rpc);
      }
      if (Unique != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Unique);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Rpc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rpc);
      }
      if (Unique != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unique);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_Request other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Rpc.Length != 0) {
        Rpc = other.Rpc;
      }
      if (other.Unique != 0) {
        Unique = other.Unique;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            Rpc = input.ReadString();
            break;
          }
          case 24: {
            Unique = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class _Response : pb::IMessage<_Response> {
    private static readonly pb::MessageParser<_Response> _parser = new pb::MessageParser<_Response>(() => new _Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.StructReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _Response(_Response other) : this() {
      token_ = other.token_;
      code_ = other.code_;
      rpc_ = other.rpc_;
      unique_ = other.unique_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _Response Clone() {
      return new _Response(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "rpc" field.</summary>
    public const int RpcFieldNumber = 3;
    private string rpc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rpc {
      get { return rpc_; }
      set {
        rpc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique" field.</summary>
    public const int UniqueFieldNumber = 4;
    private int unique_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unique {
      get { return unique_; }
      set {
        unique_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Code != other.Code) return false;
      if (Rpc != other.Rpc) return false;
      if (Unique != other.Unique) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Rpc.Length != 0) hash ^= Rpc.GetHashCode();
      if (Unique != 0) hash ^= Unique.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
      if (Rpc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Rpc);
      }
      if (Unique != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Unique);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Rpc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rpc);
      }
      if (Unique != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unique);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_Response other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Rpc.Length != 0) {
        Rpc = other.Rpc;
      }
      if (other.Unique != 0) {
        Unique = other.Unique;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
          case 26: {
            Rpc = input.ReadString();
            break;
          }
          case 32: {
            Unique = input.ReadInt32();
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.StructReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      userId_ = other.userId_;
      userName_ = other.userName_;
      level_ = other.level_;
      zoneId_ = other.zoneId_;
      state_ = other.state_;
      gameRemainTime_ = other.gameRemainTime_;
      roundOrder_ = other.roundOrder_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 4;
    private int zoneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    /// <summary>
    ///enum PlayerState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "gameRemainTime" field.</summary>
    public const int GameRemainTimeFieldNumber = 6;
    private int gameRemainTime_;
    /// <summary>
    ///倒计时时间，默认-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameRemainTime {
      get { return gameRemainTime_; }
      set {
        gameRemainTime_ = value;
      }
    }

    /// <summary>Field number for the "roundOrder" field.</summary>
    public const int RoundOrderFieldNumber = 7;
    private int roundOrder_;
    /// <summary>
    ///当前的回合顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundOrder {
      get { return roundOrder_; }
      set {
        roundOrder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (Level != other.Level) return false;
      if (ZoneId != other.ZoneId) return false;
      if (State != other.State) return false;
      if (GameRemainTime != other.GameRemainTime) return false;
      if (RoundOrder != other.RoundOrder) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (ZoneId != 0) hash ^= ZoneId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (GameRemainTime != 0) hash ^= GameRemainTime.GetHashCode();
      if (RoundOrder != 0) hash ^= RoundOrder.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (ZoneId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ZoneId);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (GameRemainTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GameRemainTime);
      }
      if (RoundOrder != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RoundOrder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZoneId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (GameRemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameRemainTime);
      }
      if (RoundOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundOrder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.ZoneId != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.GameRemainTime != 0) {
        GameRemainTime = other.GameRemainTime;
      }
      if (other.RoundOrder != 0) {
        RoundOrder = other.RoundOrder;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            ZoneId = input.ReadInt32();
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
          case 48: {
            GameRemainTime = input.ReadInt32();
            break;
          }
          case 56: {
            RoundOrder = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChessData : pb::IMessage<ChessData> {
    private static readonly pb::MessageParser<ChessData> _parser = new pb::MessageParser<ChessData>(() => new ChessData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChessData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.StructReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessData(ChessData other) : this() {
      chessRemoteId_ = other.chessRemoteId_;
      chessType_ = other.chessType_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      group_ = other.group_;
      belong_ = other.belong_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessData Clone() {
      return new ChessData(this);
    }

    /// <summary>Field number for the "chessRemoteId" field.</summary>
    public const int ChessRemoteIdFieldNumber = 1;
    private int chessRemoteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChessRemoteId {
      get { return chessRemoteId_; }
      set {
        chessRemoteId_ = value;
      }
    }

    /// <summary>Field number for the "ChessType" field.</summary>
    public const int ChessTypeFieldNumber = 2;
    private int chessType_;
    /// <summary>
    ///非明牌模式下，默认 -1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChessType {
      get { return chessType_; }
      set {
        chessType_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 3;
    private global::Com.Violet.Rpc.ChessPoint point_;
    /// <summary>
    /// { "地雷", "炸弹", "工兵", "排长", "连长", "营长", "团长", "旅长", "师长", "军长", "司令", "军旗" }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Violet.Rpc.ChessPoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 4;
    private int group_;
    /// <summary>
    ///敌我阵营，0为我方  emum ChessGroup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "belong" field.</summary>
    public const int BelongFieldNumber = 5;
    private string belong_ = "";
    /// <summary>
    ///属于哪一方，zoneId+"/"+userId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Belong {
      get { return belong_; }
      set {
        belong_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChessData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChessData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChessRemoteId != other.ChessRemoteId) return false;
      if (ChessType != other.ChessType) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Group != other.Group) return false;
      if (Belong != other.Belong) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChessRemoteId != 0) hash ^= ChessRemoteId.GetHashCode();
      if (ChessType != 0) hash ^= ChessType.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Group != 0) hash ^= Group.GetHashCode();
      if (Belong.Length != 0) hash ^= Belong.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChessRemoteId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChessRemoteId);
      }
      if (ChessType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChessType);
      }
      if (point_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Point);
      }
      if (Group != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Group);
      }
      if (Belong.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Belong);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChessRemoteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChessRemoteId);
      }
      if (ChessType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChessType);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Belong.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Belong);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChessData other) {
      if (other == null) {
        return;
      }
      if (other.ChessRemoteId != 0) {
        ChessRemoteId = other.ChessRemoteId;
      }
      if (other.ChessType != 0) {
        ChessType = other.ChessType;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::Com.Violet.Rpc.ChessPoint();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Group != 0) {
        Group = other.Group;
      }
      if (other.Belong.Length != 0) {
        Belong = other.Belong;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChessRemoteId = input.ReadInt32();
            break;
          }
          case 16: {
            ChessType = input.ReadInt32();
            break;
          }
          case 26: {
            if (point_ == null) {
              point_ = new global::Com.Violet.Rpc.ChessPoint();
            }
            input.ReadMessage(point_);
            break;
          }
          case 32: {
            Group = input.ReadInt32();
            break;
          }
          case 42: {
            Belong = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChessPoint : pb::IMessage<ChessPoint> {
    private static readonly pb::MessageParser<ChessPoint> _parser = new pb::MessageParser<ChessPoint>(() => new ChessPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChessPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.StructReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessPoint(ChessPoint other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessPoint Clone() {
      return new ChessPoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChessPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChessPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChessPoint other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomData : pb::IMessage<RoomData> {
    private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.StructReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData(RoomData other) : this() {
      roomId_ = other.roomId_;
      roomName_ = other.roomName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData Clone() {
      return new RoomData(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (RoomName != other.RoomName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomData other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageData : pb::IMessage<MessageData> {
    private static readonly pb::MessageParser<MessageData> _parser = new pb::MessageParser<MessageData>(() => new MessageData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.StructReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageData(MessageData other) : this() {
      userId_ = other.userId_;
      zoneId_ = other.zoneId_;
      userName_ = other.userName_;
      level_ = other.level_;
      timestamp_ = other.timestamp_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageData Clone() {
      return new MessageData(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 2;
    private int zoneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 3;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 6;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ZoneId != other.ZoneId) return false;
      if (UserName != other.UserName) return false;
      if (Level != other.Level) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (ZoneId != 0) hash ^= ZoneId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (ZoneId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ZoneId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Timestamp);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZoneId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageData other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.ZoneId != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            ZoneId = input.ReadInt32();
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
