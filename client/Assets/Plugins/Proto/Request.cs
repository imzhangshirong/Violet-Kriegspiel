// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Violet.Rpc {

  /// <summary>Holder for reflection information generated from Request.proto</summary>
  public static partial class RequestReflection {

    #region Descriptor
    /// <summary>File descriptor for Request.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1SZXF1ZXN0LnByb3RvEg5jb20udmlvbGV0LnJwYxoMU3RydWN0LnByb3Rv",
            "IjIKDExvZ2luUmVxdWVzdBIQCgh1c2VyTmFtZRgBIAEoCRIQCghwYXNzd29y",
            "ZBgCIAEoCSJTCg1Mb2dpblJlc3BvbnNlEi4KCnBsYXllckluZm8YASABKAsy",
            "Gi5jb20udmlvbGV0LnJwYy5QbGF5ZXJJbmZvEhIKCnNlcnZlclRpbWUYAiAB",
            "KAMiEgoQRmluZEVuZW15UmVxdWVzdCIqChFGaW5kRW5lbXlSZXNwb25zZRIV",
            "Cg1qb2luR2FtZUZpZWxkGAEgASgIIhgKFkNhbmNlbEZpbmRFbmVteVJlcXVl",
            "c3QiKwoXQ2FuY2VsRmluZEVuZW15UmVzcG9uc2USEAoIaXNDYW5jZWwYASAB",
            "KAgiJAoSR2V0Um9vbUxpc3RSZXF1ZXN0Eg4KBnpvbmVJZBgBIAEoBSJBChNH",
            "ZXRSb29tTGlzdFJlc3BvbnNlEioKCHJvb21MaXN0GAEgAygLMhguY29tLnZp",
            "b2xldC5ycGMuUm9vbURhdGEiNAoQRW50ZXJSb29tUmVxdWVzdBIOCgZyb29t",
            "SWQYASABKAUSEAoIcGFzc3dvcmQYAiABKAkiQwoRRW50ZXJSb29tUmVzcG9u",
            "c2USLgoKcGxheWVyTGlzdBgBIAMoCzIaLmNvbS52aW9sZXQucnBjLlBsYXll",
            "ckluZm8iJQoSUmVhZHlJblJvb21SZXF1ZXN0Eg8KB2lzUmVhZHkYASABKAgi",
            "LAoTUmVhZHlJblJvb21SZXNwb25zZRIVCg1pc0NoYW5nZVN0YXRlGAEgASgI",
            "IiIKEExlYXZlUm9vbVJlcXVlc3QSDgoGcm9vbUlkGAEgASgFIiQKEUxlYXZl",
            "Um9vbVJlc3BvbnNlEg8KB2lzTGVhdmUYASABKAgiaAoQTW92ZUNoZXNzUmVx",
            "dWVzdBIpCgZzb3VyY2UYASABKAsyGS5jb20udmlvbGV0LnJwYy5DaGVzc0Rh",
            "dGESKQoGdGFyZ2V0GAIgASgLMhkuY29tLnZpb2xldC5ycGMuQ2hlc3NEYXRh",
            "IpMBChFNb3ZlQ2hlc3NSZXNwb25zZRIpCgZzb3VyY2UYASABKAsyGS5jb20u",
            "dmlvbGV0LnJwYy5DaGVzc0RhdGESKQoGdGFyZ2V0GAIgASgLMhkuY29tLnZp",
            "b2xldC5ycGMuQ2hlc3NEYXRhEhcKD2NoZXNzTW92ZVJlc3VsdBgDIAEoBRIP",
            "Cgdjb3VudGVyGAQgASgFIhIKEEJhdHRsZU1hcFJlcXVlc3QiUQoRQmF0dGxl",
            "TWFwUmVzcG9uc2USKwoIY2hlc3NNYXAYASADKAsyGS5jb20udmlvbGV0LnJw",
            "Yy5DaGVzc0RhdGESDwoHY291bnRlchgCIAEoBSIXChVDaGVja0dhbWVTdGF0",
            "ZVJlcXVlc3QiKwoWQ2hlY2tHYW1lU3RhdGVSZXNwb25zZRIRCglyb29tVG9r",
            "ZW4YASABKAkiLAoXRW50ZXJCYXR0bGVGaWVsZFJlcXVlc3QSEQoJcm9vbVRv",
            "a2VuGAEgASgJItwBChhFbnRlckJhdHRsZUZpZWxkUmVzcG9uc2USKgoIcm9v",
            "bURhdGEYASABKAsyGC5jb20udmlvbGV0LnJwYy5Sb29tRGF0YRIuCgpwbGF5",
            "ZXJMaXN0GAIgAygLMhouY29tLnZpb2xldC5ycGMuUGxheWVySW5mbxIrCghj",
            "aGVzc01hcBgDIAMoCzIZLmNvbS52aW9sZXQucnBjLkNoZXNzRGF0YRIPCgdj",
            "b3VudGVyGAQgASgFEhIKCnJvdW5kT3JkZXIYBSABKAUSEgoKcmVtYWluVGlt",
            "ZRgGIAEoBSISChBTdXJyZW5kZXJSZXF1ZXN0IigKEVN1cnJlbmRlclJlc3Bv",
            "bnNlEhMKC2lzU3VycmVuZGVyGAEgASgIIlMKFlNlbmRDaGF0TWVzc2FnZVJl",
            "cXVlc3QSDwoHdG9XaGVyZRgBIAEoBRIoCgNtc2cYAiABKAsyGy5jb20udmlv",
            "bGV0LnJwYy5NZXNzYWdlRGF0YSIZChdTZW5kQ2hhdE1lc3NhZ2VSZXNwb25z",
            "ZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Violet.Rpc.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.LoginRequest), global::Com.Violet.Rpc.LoginRequest.Parser, new[]{ "UserName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.LoginResponse), global::Com.Violet.Rpc.LoginResponse.Parser, new[]{ "PlayerInfo", "ServerTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.FindEnemyRequest), global::Com.Violet.Rpc.FindEnemyRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.FindEnemyResponse), global::Com.Violet.Rpc.FindEnemyResponse.Parser, new[]{ "JoinGameField" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.CancelFindEnemyRequest), global::Com.Violet.Rpc.CancelFindEnemyRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.CancelFindEnemyResponse), global::Com.Violet.Rpc.CancelFindEnemyResponse.Parser, new[]{ "IsCancel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.GetRoomListRequest), global::Com.Violet.Rpc.GetRoomListRequest.Parser, new[]{ "ZoneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.GetRoomListResponse), global::Com.Violet.Rpc.GetRoomListResponse.Parser, new[]{ "RoomList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.EnterRoomRequest), global::Com.Violet.Rpc.EnterRoomRequest.Parser, new[]{ "RoomId", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.EnterRoomResponse), global::Com.Violet.Rpc.EnterRoomResponse.Parser, new[]{ "PlayerList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.ReadyInRoomRequest), global::Com.Violet.Rpc.ReadyInRoomRequest.Parser, new[]{ "IsReady" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.ReadyInRoomResponse), global::Com.Violet.Rpc.ReadyInRoomResponse.Parser, new[]{ "IsChangeState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.LeaveRoomRequest), global::Com.Violet.Rpc.LeaveRoomRequest.Parser, new[]{ "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.LeaveRoomResponse), global::Com.Violet.Rpc.LeaveRoomResponse.Parser, new[]{ "IsLeave" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.MoveChessRequest), global::Com.Violet.Rpc.MoveChessRequest.Parser, new[]{ "Source", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.MoveChessResponse), global::Com.Violet.Rpc.MoveChessResponse.Parser, new[]{ "Source", "Target", "ChessMoveResult", "Counter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.BattleMapRequest), global::Com.Violet.Rpc.BattleMapRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.BattleMapResponse), global::Com.Violet.Rpc.BattleMapResponse.Parser, new[]{ "ChessMap", "Counter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.CheckGameStateRequest), global::Com.Violet.Rpc.CheckGameStateRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.CheckGameStateResponse), global::Com.Violet.Rpc.CheckGameStateResponse.Parser, new[]{ "RoomToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.EnterBattleFieldRequest), global::Com.Violet.Rpc.EnterBattleFieldRequest.Parser, new[]{ "RoomToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.EnterBattleFieldResponse), global::Com.Violet.Rpc.EnterBattleFieldResponse.Parser, new[]{ "RoomData", "PlayerList", "ChessMap", "Counter", "RoundOrder", "RemainTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.SurrenderRequest), global::Com.Violet.Rpc.SurrenderRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.SurrenderResponse), global::Com.Violet.Rpc.SurrenderResponse.Parser, new[]{ "IsSurrender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.SendChatMessageRequest), global::Com.Violet.Rpc.SendChatMessageRequest.Parser, new[]{ "ToWhere", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Violet.Rpc.SendChatMessageResponse), global::Com.Violet.Rpc.SendChatMessageResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      userName_ = other.userName_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    ///这里考虑加密
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      serverTime_ = other.serverTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::Com.Violet.Rpc.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Violet.Rpc.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 2;
    private long serverTime_;
    /// <summary>
    ///同步服务器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (ServerTime != other.ServerTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (ServerTime != 0L) hash ^= ServerTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (ServerTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ServerTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (ServerTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Com.Violet.Rpc.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.ServerTime != 0L) {
        ServerTime = other.ServerTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Com.Violet.Rpc.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 16: {
            ServerTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///寻找一场匹配
  /// </summary>
  public sealed partial class FindEnemyRequest : pb::IMessage<FindEnemyRequest> {
    private static readonly pb::MessageParser<FindEnemyRequest> _parser = new pb::MessageParser<FindEnemyRequest>(() => new FindEnemyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindEnemyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindEnemyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindEnemyRequest(FindEnemyRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindEnemyRequest Clone() {
      return new FindEnemyRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindEnemyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindEnemyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindEnemyRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class FindEnemyResponse : pb::IMessage<FindEnemyResponse> {
    private static readonly pb::MessageParser<FindEnemyResponse> _parser = new pb::MessageParser<FindEnemyResponse>(() => new FindEnemyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindEnemyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindEnemyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindEnemyResponse(FindEnemyResponse other) : this() {
      joinGameField_ = other.joinGameField_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindEnemyResponse Clone() {
      return new FindEnemyResponse(this);
    }

    /// <summary>Field number for the "joinGameField" field.</summary>
    public const int JoinGameFieldFieldNumber = 1;
    private bool joinGameField_;
    /// <summary>
    ///是否开始匹配
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool JoinGameField {
      get { return joinGameField_; }
      set {
        joinGameField_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindEnemyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindEnemyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JoinGameField != other.JoinGameField) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JoinGameField != false) hash ^= JoinGameField.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JoinGameField != false) {
        output.WriteRawTag(8);
        output.WriteBool(JoinGameField);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JoinGameField != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindEnemyResponse other) {
      if (other == null) {
        return;
      }
      if (other.JoinGameField != false) {
        JoinGameField = other.JoinGameField;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            JoinGameField = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///取消寻找匹配
  /// </summary>
  public sealed partial class CancelFindEnemyRequest : pb::IMessage<CancelFindEnemyRequest> {
    private static readonly pb::MessageParser<CancelFindEnemyRequest> _parser = new pb::MessageParser<CancelFindEnemyRequest>(() => new CancelFindEnemyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelFindEnemyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindEnemyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindEnemyRequest(CancelFindEnemyRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindEnemyRequest Clone() {
      return new CancelFindEnemyRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelFindEnemyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelFindEnemyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelFindEnemyRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CancelFindEnemyResponse : pb::IMessage<CancelFindEnemyResponse> {
    private static readonly pb::MessageParser<CancelFindEnemyResponse> _parser = new pb::MessageParser<CancelFindEnemyResponse>(() => new CancelFindEnemyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelFindEnemyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindEnemyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindEnemyResponse(CancelFindEnemyResponse other) : this() {
      isCancel_ = other.isCancel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindEnemyResponse Clone() {
      return new CancelFindEnemyResponse(this);
    }

    /// <summary>Field number for the "isCancel" field.</summary>
    public const int IsCancelFieldNumber = 1;
    private bool isCancel_;
    /// <summary>
    ///是否已经结束匹配
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCancel {
      get { return isCancel_; }
      set {
        isCancel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelFindEnemyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelFindEnemyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsCancel != other.IsCancel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsCancel != false) hash ^= IsCancel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsCancel != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCancel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsCancel != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelFindEnemyResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsCancel != false) {
        IsCancel = other.IsCancel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsCancel = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取房间列表，todo
  /// </summary>
  public sealed partial class GetRoomListRequest : pb::IMessage<GetRoomListRequest> {
    private static readonly pb::MessageParser<GetRoomListRequest> _parser = new pb::MessageParser<GetRoomListRequest>(() => new GetRoomListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRequest(GetRoomListRequest other) : this() {
      zoneId_ = other.zoneId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRequest Clone() {
      return new GetRoomListRequest(this);
    }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private int zoneId_;
    /// <summary>
    ///用户自己的zoneId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZoneId != other.ZoneId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZoneId != 0) hash ^= ZoneId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ZoneId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZoneId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomListRequest other) {
      if (other == null) {
        return;
      }
      if (other.ZoneId != 0) {
        ZoneId = other.ZoneId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRoomListResponse : pb::IMessage<GetRoomListResponse> {
    private static readonly pb::MessageParser<GetRoomListResponse> _parser = new pb::MessageParser<GetRoomListResponse>(() => new GetRoomListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListResponse(GetRoomListResponse other) : this() {
      roomList_ = other.roomList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListResponse Clone() {
      return new GetRoomListResponse(this);
    }

    /// <summary>Field number for the "roomList" field.</summary>
    public const int RoomListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Violet.Rpc.RoomData> _repeated_roomList_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Violet.Rpc.RoomData.Parser);
    private readonly pbc::RepeatedField<global::Com.Violet.Rpc.RoomData> roomList_ = new pbc::RepeatedField<global::Com.Violet.Rpc.RoomData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Violet.Rpc.RoomData> RoomList {
      get { return roomList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roomList_.Equals(other.roomList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roomList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roomList_.WriteTo(output, _repeated_roomList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roomList_.CalculateSize(_repeated_roomList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomListResponse other) {
      if (other == null) {
        return;
      }
      roomList_.Add(other.roomList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roomList_.AddEntriesFrom(input, _repeated_roomList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// todo
  /// </summary>
  public sealed partial class EnterRoomRequest : pb::IMessage<EnterRoomRequest> {
    private static readonly pb::MessageParser<EnterRoomRequest> _parser = new pb::MessageParser<EnterRoomRequest>(() => new EnterRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomRequest(EnterRoomRequest other) : this() {
      roomId_ = other.roomId_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomRequest Clone() {
      return new EnterRoomRequest(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoomRequest other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterRoomResponse : pb::IMessage<EnterRoomResponse> {
    private static readonly pb::MessageParser<EnterRoomResponse> _parser = new pb::MessageParser<EnterRoomResponse>(() => new EnterRoomResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomResponse(EnterRoomResponse other) : this() {
      playerList_ = other.playerList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomResponse Clone() {
      return new EnterRoomResponse(this);
    }

    /// <summary>Field number for the "playerList" field.</summary>
    public const int PlayerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Violet.Rpc.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Violet.Rpc.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Com.Violet.Rpc.PlayerInfo> playerList_ = new pbc::RepeatedField<global::Com.Violet.Rpc.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Violet.Rpc.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoomResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerList_.Equals(other.playerList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerList_.WriteTo(output, _repeated_playerList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoomResponse other) {
      if (other == null) {
        return;
      }
      playerList_.Add(other.playerList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadyInRoomRequest : pb::IMessage<ReadyInRoomRequest> {
    private static readonly pb::MessageParser<ReadyInRoomRequest> _parser = new pb::MessageParser<ReadyInRoomRequest>(() => new ReadyInRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadyInRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyInRoomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyInRoomRequest(ReadyInRoomRequest other) : this() {
      isReady_ = other.isReady_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyInRoomRequest Clone() {
      return new ReadyInRoomRequest(this);
    }

    /// <summary>Field number for the "isReady" field.</summary>
    public const int IsReadyFieldNumber = 1;
    private bool isReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadyInRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadyInRoomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsReady != other.IsReady) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsReady != false) hash ^= IsReady.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsReady != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsReady);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsReady != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadyInRoomRequest other) {
      if (other == null) {
        return;
      }
      if (other.IsReady != false) {
        IsReady = other.IsReady;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsReady = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadyInRoomResponse : pb::IMessage<ReadyInRoomResponse> {
    private static readonly pb::MessageParser<ReadyInRoomResponse> _parser = new pb::MessageParser<ReadyInRoomResponse>(() => new ReadyInRoomResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadyInRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyInRoomResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyInRoomResponse(ReadyInRoomResponse other) : this() {
      isChangeState_ = other.isChangeState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyInRoomResponse Clone() {
      return new ReadyInRoomResponse(this);
    }

    /// <summary>Field number for the "isChangeState" field.</summary>
    public const int IsChangeStateFieldNumber = 1;
    private bool isChangeState_;
    /// <summary>
    ///是否成功更改准备状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsChangeState {
      get { return isChangeState_; }
      set {
        isChangeState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadyInRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadyInRoomResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsChangeState != other.IsChangeState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsChangeState != false) hash ^= IsChangeState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsChangeState != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsChangeState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsChangeState != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadyInRoomResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsChangeState != false) {
        IsChangeState = other.IsChangeState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsChangeState = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveRoomRequest : pb::IMessage<LeaveRoomRequest> {
    private static readonly pb::MessageParser<LeaveRoomRequest> _parser = new pb::MessageParser<LeaveRoomRequest>(() => new LeaveRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRequest(LeaveRoomRequest other) : this() {
      roomId_ = other.roomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRequest Clone() {
      return new LeaveRoomRequest(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomRequest other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveRoomResponse : pb::IMessage<LeaveRoomResponse> {
    private static readonly pb::MessageParser<LeaveRoomResponse> _parser = new pb::MessageParser<LeaveRoomResponse>(() => new LeaveRoomResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomResponse(LeaveRoomResponse other) : this() {
      isLeave_ = other.isLeave_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomResponse Clone() {
      return new LeaveRoomResponse(this);
    }

    /// <summary>Field number for the "isLeave" field.</summary>
    public const int IsLeaveFieldNumber = 1;
    private bool isLeave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeave {
      get { return isLeave_; }
      set {
        isLeave_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsLeave != other.IsLeave) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsLeave != false) hash ^= IsLeave.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsLeave != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsLeave);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsLeave != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsLeave != false) {
        IsLeave = other.IsLeave;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsLeave = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///走子请求
  /// </summary>
  public sealed partial class MoveChessRequest : pb::IMessage<MoveChessRequest> {
    private static readonly pb::MessageParser<MoveChessRequest> _parser = new pb::MessageParser<MoveChessRequest>(() => new MoveChessRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveChessRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveChessRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveChessRequest(MoveChessRequest other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Target = other.target_ != null ? other.Target.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveChessRequest Clone() {
      return new MoveChessRequest(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::Com.Violet.Rpc.ChessData source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Violet.Rpc.ChessData Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::Com.Violet.Rpc.ChessData target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Violet.Rpc.ChessData Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveChessRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveChessRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveChessRequest other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Com.Violet.Rpc.ChessData();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Com.Violet.Rpc.ChessData();
        }
        Target.MergeFrom(other.Target);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::Com.Violet.Rpc.ChessData();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (target_ == null) {
              target_ = new global::Com.Violet.Rpc.ChessData();
            }
            input.ReadMessage(target_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveChessResponse : pb::IMessage<MoveChessResponse> {
    private static readonly pb::MessageParser<MoveChessResponse> _parser = new pb::MessageParser<MoveChessResponse>(() => new MoveChessResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveChessResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveChessResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveChessResponse(MoveChessResponse other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Target = other.target_ != null ? other.Target.Clone() : null;
      chessMoveResult_ = other.chessMoveResult_;
      counter_ = other.counter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveChessResponse Clone() {
      return new MoveChessResponse(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::Com.Violet.Rpc.ChessData source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Violet.Rpc.ChessData Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::Com.Violet.Rpc.ChessData target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Violet.Rpc.ChessData Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "chessMoveResult" field.</summary>
    public const int ChessMoveResultFieldNumber = 3;
    private int chessMoveResult_;
    /// <summary>
    ///enum ChessMoveResult
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChessMoveResult {
      get { return chessMoveResult_; }
      set {
        chessMoveResult_ = value;
      }
    }

    /// <summary>Field number for the "counter" field.</summary>
    public const int CounterFieldNumber = 4;
    private int counter_;
    /// <summary>
    ///计数器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Counter {
      get { return counter_; }
      set {
        counter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveChessResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveChessResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if (ChessMoveResult != other.ChessMoveResult) return false;
      if (Counter != other.Counter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (ChessMoveResult != 0) hash ^= ChessMoveResult.GetHashCode();
      if (Counter != 0) hash ^= Counter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (ChessMoveResult != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChessMoveResult);
      }
      if (Counter != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Counter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (ChessMoveResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChessMoveResult);
      }
      if (Counter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Counter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveChessResponse other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Com.Violet.Rpc.ChessData();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Com.Violet.Rpc.ChessData();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.ChessMoveResult != 0) {
        ChessMoveResult = other.ChessMoveResult;
      }
      if (other.Counter != 0) {
        Counter = other.Counter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::Com.Violet.Rpc.ChessData();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (target_ == null) {
              target_ = new global::Com.Violet.Rpc.ChessData();
            }
            input.ReadMessage(target_);
            break;
          }
          case 24: {
            ChessMoveResult = input.ReadInt32();
            break;
          }
          case 32: {
            Counter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求整个棋盘的数据
  /// </summary>
  public sealed partial class BattleMapRequest : pb::IMessage<BattleMapRequest> {
    private static readonly pb::MessageParser<BattleMapRequest> _parser = new pb::MessageParser<BattleMapRequest>(() => new BattleMapRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMapRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapRequest(BattleMapRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapRequest Clone() {
      return new BattleMapRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleMapRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleMapRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleMapRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class BattleMapResponse : pb::IMessage<BattleMapResponse> {
    private static readonly pb::MessageParser<BattleMapResponse> _parser = new pb::MessageParser<BattleMapResponse>(() => new BattleMapResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMapResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapResponse(BattleMapResponse other) : this() {
      chessMap_ = other.chessMap_.Clone();
      counter_ = other.counter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapResponse Clone() {
      return new BattleMapResponse(this);
    }

    /// <summary>Field number for the "chessMap" field.</summary>
    public const int ChessMapFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Violet.Rpc.ChessData> _repeated_chessMap_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Violet.Rpc.ChessData.Parser);
    private readonly pbc::RepeatedField<global::Com.Violet.Rpc.ChessData> chessMap_ = new pbc::RepeatedField<global::Com.Violet.Rpc.ChessData>();
    /// <summary>
    ///棋子布局数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Violet.Rpc.ChessData> ChessMap {
      get { return chessMap_; }
    }

    /// <summary>Field number for the "counter" field.</summary>
    public const int CounterFieldNumber = 2;
    private int counter_;
    /// <summary>
    ///计数器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Counter {
      get { return counter_; }
      set {
        counter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleMapResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleMapResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chessMap_.Equals(other.chessMap_)) return false;
      if (Counter != other.Counter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chessMap_.GetHashCode();
      if (Counter != 0) hash ^= Counter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chessMap_.WriteTo(output, _repeated_chessMap_codec);
      if (Counter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Counter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chessMap_.CalculateSize(_repeated_chessMap_codec);
      if (Counter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Counter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleMapResponse other) {
      if (other == null) {
        return;
      }
      chessMap_.Add(other.chessMap_);
      if (other.Counter != 0) {
        Counter = other.Counter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            chessMap_.AddEntriesFrom(input, _repeated_chessMap_codec);
            break;
          }
          case 16: {
            Counter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckGameStateRequest : pb::IMessage<CheckGameStateRequest> {
    private static readonly pb::MessageParser<CheckGameStateRequest> _parser = new pb::MessageParser<CheckGameStateRequest>(() => new CheckGameStateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckGameStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStateRequest(CheckGameStateRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStateRequest Clone() {
      return new CheckGameStateRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckGameStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckGameStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckGameStateRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CheckGameStateResponse : pb::IMessage<CheckGameStateResponse> {
    private static readonly pb::MessageParser<CheckGameStateResponse> _parser = new pb::MessageParser<CheckGameStateResponse>(() => new CheckGameStateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckGameStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStateResponse(CheckGameStateResponse other) : this() {
      roomToken_ = other.roomToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStateResponse Clone() {
      return new CheckGameStateResponse(this);
    }

    /// <summary>Field number for the "roomToken" field.</summary>
    public const int RoomTokenFieldNumber = 1;
    private string roomToken_ = "";
    /// <summary>
    ///用于断线重连直接进入房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomToken {
      get { return roomToken_; }
      set {
        roomToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckGameStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckGameStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomToken != other.RoomToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomToken.Length != 0) hash ^= RoomToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckGameStateResponse other) {
      if (other == null) {
        return;
      }
      if (other.RoomToken.Length != 0) {
        RoomToken = other.RoomToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterBattleFieldRequest : pb::IMessage<EnterBattleFieldRequest> {
    private static readonly pb::MessageParser<EnterBattleFieldRequest> _parser = new pb::MessageParser<EnterBattleFieldRequest>(() => new EnterBattleFieldRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterBattleFieldRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterBattleFieldRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterBattleFieldRequest(EnterBattleFieldRequest other) : this() {
      roomToken_ = other.roomToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterBattleFieldRequest Clone() {
      return new EnterBattleFieldRequest(this);
    }

    /// <summary>Field number for the "roomToken" field.</summary>
    public const int RoomTokenFieldNumber = 1;
    private string roomToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomToken {
      get { return roomToken_; }
      set {
        roomToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterBattleFieldRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterBattleFieldRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomToken != other.RoomToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomToken.Length != 0) hash ^= RoomToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterBattleFieldRequest other) {
      if (other == null) {
        return;
      }
      if (other.RoomToken.Length != 0) {
        RoomToken = other.RoomToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterBattleFieldResponse : pb::IMessage<EnterBattleFieldResponse> {
    private static readonly pb::MessageParser<EnterBattleFieldResponse> _parser = new pb::MessageParser<EnterBattleFieldResponse>(() => new EnterBattleFieldResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterBattleFieldResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterBattleFieldResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterBattleFieldResponse(EnterBattleFieldResponse other) : this() {
      RoomData = other.roomData_ != null ? other.RoomData.Clone() : null;
      playerList_ = other.playerList_.Clone();
      chessMap_ = other.chessMap_.Clone();
      counter_ = other.counter_;
      roundOrder_ = other.roundOrder_;
      remainTime_ = other.remainTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterBattleFieldResponse Clone() {
      return new EnterBattleFieldResponse(this);
    }

    /// <summary>Field number for the "roomData" field.</summary>
    public const int RoomDataFieldNumber = 1;
    private global::Com.Violet.Rpc.RoomData roomData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Violet.Rpc.RoomData RoomData {
      get { return roomData_; }
      set {
        roomData_ = value;
      }
    }

    /// <summary>Field number for the "playerList" field.</summary>
    public const int PlayerListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Violet.Rpc.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Violet.Rpc.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Com.Violet.Rpc.PlayerInfo> playerList_ = new pbc::RepeatedField<global::Com.Violet.Rpc.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Violet.Rpc.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "chessMap" field.</summary>
    public const int ChessMapFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Violet.Rpc.ChessData> _repeated_chessMap_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Violet.Rpc.ChessData.Parser);
    private readonly pbc::RepeatedField<global::Com.Violet.Rpc.ChessData> chessMap_ = new pbc::RepeatedField<global::Com.Violet.Rpc.ChessData>();
    /// <summary>
    ///棋子布局数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Violet.Rpc.ChessData> ChessMap {
      get { return chessMap_; }
    }

    /// <summary>Field number for the "counter" field.</summary>
    public const int CounterFieldNumber = 4;
    private int counter_;
    /// <summary>
    ///计数器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Counter {
      get { return counter_; }
      set {
        counter_ = value;
      }
    }

    /// <summary>Field number for the "roundOrder" field.</summary>
    public const int RoundOrderFieldNumber = 5;
    private int roundOrder_;
    /// <summary>
    ///我方回合顺序位置，从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundOrder {
      get { return roundOrder_; }
      set {
        roundOrder_ = value;
      }
    }

    /// <summary>Field number for the "remainTime" field.</summary>
    public const int RemainTimeFieldNumber = 6;
    private int remainTime_;
    /// <summary>
    ///倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterBattleFieldResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterBattleFieldResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomData, other.RoomData)) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      if(!chessMap_.Equals(other.chessMap_)) return false;
      if (Counter != other.Counter) return false;
      if (RoundOrder != other.RoundOrder) return false;
      if (RemainTime != other.RemainTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomData_ != null) hash ^= RoomData.GetHashCode();
      hash ^= playerList_.GetHashCode();
      hash ^= chessMap_.GetHashCode();
      if (Counter != 0) hash ^= Counter.GetHashCode();
      if (RoundOrder != 0) hash ^= RoundOrder.GetHashCode();
      if (RemainTime != 0) hash ^= RemainTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomData);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
      chessMap_.WriteTo(output, _repeated_chessMap_codec);
      if (Counter != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Counter);
      }
      if (RoundOrder != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoundOrder);
      }
      if (RemainTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RemainTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomData);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      size += chessMap_.CalculateSize(_repeated_chessMap_codec);
      if (Counter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Counter);
      }
      if (RoundOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundOrder);
      }
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterBattleFieldResponse other) {
      if (other == null) {
        return;
      }
      if (other.roomData_ != null) {
        if (roomData_ == null) {
          roomData_ = new global::Com.Violet.Rpc.RoomData();
        }
        RoomData.MergeFrom(other.RoomData);
      }
      playerList_.Add(other.playerList_);
      chessMap_.Add(other.chessMap_);
      if (other.Counter != 0) {
        Counter = other.Counter;
      }
      if (other.RoundOrder != 0) {
        RoundOrder = other.RoundOrder;
      }
      if (other.RemainTime != 0) {
        RemainTime = other.RemainTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomData_ == null) {
              roomData_ = new global::Com.Violet.Rpc.RoomData();
            }
            input.ReadMessage(roomData_);
            break;
          }
          case 18: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 26: {
            chessMap_.AddEntriesFrom(input, _repeated_chessMap_codec);
            break;
          }
          case 32: {
            Counter = input.ReadInt32();
            break;
          }
          case 40: {
            RoundOrder = input.ReadInt32();
            break;
          }
          case 48: {
            RemainTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SurrenderRequest : pb::IMessage<SurrenderRequest> {
    private static readonly pb::MessageParser<SurrenderRequest> _parser = new pb::MessageParser<SurrenderRequest>(() => new SurrenderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SurrenderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SurrenderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SurrenderRequest(SurrenderRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SurrenderRequest Clone() {
      return new SurrenderRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SurrenderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SurrenderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SurrenderRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SurrenderResponse : pb::IMessage<SurrenderResponse> {
    private static readonly pb::MessageParser<SurrenderResponse> _parser = new pb::MessageParser<SurrenderResponse>(() => new SurrenderResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SurrenderResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SurrenderResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SurrenderResponse(SurrenderResponse other) : this() {
      isSurrender_ = other.isSurrender_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SurrenderResponse Clone() {
      return new SurrenderResponse(this);
    }

    /// <summary>Field number for the "isSurrender" field.</summary>
    public const int IsSurrenderFieldNumber = 1;
    private bool isSurrender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSurrender {
      get { return isSurrender_; }
      set {
        isSurrender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SurrenderResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SurrenderResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSurrender != other.IsSurrender) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSurrender != false) hash ^= IsSurrender.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSurrender != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSurrender);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSurrender != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SurrenderResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsSurrender != false) {
        IsSurrender = other.IsSurrender;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSurrender = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendChatMessageRequest : pb::IMessage<SendChatMessageRequest> {
    private static readonly pb::MessageParser<SendChatMessageRequest> _parser = new pb::MessageParser<SendChatMessageRequest>(() => new SendChatMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendChatMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChatMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChatMessageRequest(SendChatMessageRequest other) : this() {
      toWhere_ = other.toWhere_;
      Msg = other.msg_ != null ? other.Msg.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChatMessageRequest Clone() {
      return new SendChatMessageRequest(this);
    }

    /// <summary>Field number for the "toWhere" field.</summary>
    public const int ToWhereFieldNumber = 1;
    private int toWhere_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToWhere {
      get { return toWhere_; }
      set {
        toWhere_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private global::Com.Violet.Rpc.MessageData msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Violet.Rpc.MessageData Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendChatMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendChatMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ToWhere != other.ToWhere) return false;
      if (!object.Equals(Msg, other.Msg)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ToWhere != 0) hash ^= ToWhere.GetHashCode();
      if (msg_ != null) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ToWhere != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ToWhere);
      }
      if (msg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ToWhere != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToWhere);
      }
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendChatMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.ToWhere != 0) {
        ToWhere = other.ToWhere;
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          msg_ = new global::Com.Violet.Rpc.MessageData();
        }
        Msg.MergeFrom(other.Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ToWhere = input.ReadInt32();
            break;
          }
          case 18: {
            if (msg_ == null) {
              msg_ = new global::Com.Violet.Rpc.MessageData();
            }
            input.ReadMessage(msg_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendChatMessageResponse : pb::IMessage<SendChatMessageResponse> {
    private static readonly pb::MessageParser<SendChatMessageResponse> _parser = new pb::MessageParser<SendChatMessageResponse>(() => new SendChatMessageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendChatMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Violet.Rpc.RequestReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChatMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChatMessageResponse(SendChatMessageResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChatMessageResponse Clone() {
      return new SendChatMessageResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendChatMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendChatMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendChatMessageResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
